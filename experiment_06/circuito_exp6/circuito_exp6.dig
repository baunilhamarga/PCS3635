<?xml version="1.0" encoding="utf-8"?>
<circuit>
  <version>2</version>
  <attributes/>
  <visualElements>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>CLOCK</string>
        </entry>
      </elementAttributes>
      <pos x="500" y="-480"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>RESET</string>
        </entry>
      </elementAttributes>
      <pos x="500" y="-420"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>JOGAR</string>
        </entry>
      </elementAttributes>
      <pos x="500" y="-360"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>NIVEL</string>
        </entry>
      </elementAttributes>
      <pos x="500" y="-300"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>BOTOES</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>4</int>
        </entry>
      </elementAttributes>
      <pos x="500" y="-240"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>CONTAGEM</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>7</int>
        </entry>
        <entry>
          <string>intFormat</string>
          <intFormat>bin</intFormat>
        </entry>
      </elementAttributes>
      <pos x="1360" y="-620"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>IVERILOG</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>circuito_exp6</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>clock,reset,jogar,nivel,botoes:4</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>16</int>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>ganhou,perdeu,timeout,pronto,leds:4,db_contagem:7,db_memoria:7,db_sequencia:7,db_estado:7,db_jogada_feita:7,db_enderecoIgualSequencia,db_chavesIgualMemoria</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>//------------------------------------------------------------------
// Arquivo   : circuito_exp6.v
// Projeto   : Experiencia 6 - Jogo da Memória
//------------------------------------------------------------------
// Descricao : Circuito da Experiência 6
//             
//------------------------------------------------------------------
// Revisoes  :
//     Data        Versao  Autor             Descricao
//     25/01/2025  1.0     Ana Vitória       versao inicial
//------------------------------------------------------------------
//
module circuito_exp6 (
    input clock,
    input reset,
    input jogar,
    input nivel,
    input [3:0] botoes,
    output ganhou,
    output perdeu,
    output timeout,
    output pronto,
    output [3:0] leds,
    output [6:0] db_contagem,
    output [6:0] db_memoria,
    output [6:0] db_sequencia,
    output [6:0] db_estado,
    output [6:0] db_jogada_feita,
    output db_enderecoIgualSequencia,
    output db_chavesIgualMemoria
);
    // quaisquer sinais terminados em L, referem-se ao sequencia/sequência, terminados em E, referem-se aos endereços, 
    // terminados em T, referem-se ao timeout

    wire [3:0] s_jogada_feita;
    wire [3:0] s_contagem;
    wire [3:0] s_memoria;
    wire [3:0] s_estado;
    wire [3:0] s_sequencia;
    wire s_tem_jogada;
    wire s_fimE;
    wire s_fimS;
    wire s_igualE;
    wire s_fim_timeout;
    wire s_contaT;
    wire s_contaS;
    wire s_zeraS;
    wire s_contaE;
    wire s_zeraE;
    wire s_igualS;
    wire s_zeraR;
    wire s_registraR;
    wire s_nivel;
    wire s_zeraT;
    wire s_timeoutL;
    wire s_maiorS;

    // Fluxo de Dados
    exp6_fluxo_dados FD (
        .clock                     ( clock          ),
        .botoes                    ( botoes         ),
        .nivel                     ( s_nivel        ),
        .zeraT                     ( s_zeraT        ),
        .zeraR                     ( s_zeraR        ),
        .registraR                 ( s_registraR    ),
        .contaE                    ( s_contaE       ),
        .contaS                    ( s_contaS       ),
        .contaT                    ( s_contaT       ),
        .zeraE                     ( s_zeraE        ),
        .zeraS                     ( s_zeraS        ),
        .igual                     ( s_igualE       ),
        .enderecoIgualSequencia    ( s_igualS       ),
        .fimE                      ( s_fimE         ),
        .fimS                      ( s_fimS         ),
        .db_contagem               ( s_contagem     ),
        .db_jogada_feita           ( s_jogada_feita ),
        .db_memoria                ( s_memoria      ),
        .tem_jogada                ( s_tem_jogada   ),
        .controle_timeout          ( s_fim_timeout  ),
        .db_sequencia              ( s_sequencia    ),
        .controle_timeout_led      ( s_timeoutL     ),
        .enderecoMaiorQueSequencia ( s_maiorS       )
    );

    // Unidade de Controle
    exp6_unidade_controle UC (
        .clock       ( clock          ),
        .reset       ( reset          ),
        .jogar       ( jogar          ),
        .nivel       ( nivel          ),
        .fimE        ( s_fimE         ),
        .igualE      ( s_igualE       ),
        .igualS      ( s_igualS       ),
        .tem_jogada  ( s_tem_jogada   ),
        .timeout     ( s_fim_timeout  ),
        .timeoutL    ( s_timeoutL     ),
        .maiorS      ( s_maiorS       ),
        .contagem    ( s_contagem     ),
        .zeraE       ( s_zeraE        ),
        .contaE      ( s_contaE       ),
        .zeraS       ( s_zeraS        ),
        .contaS      ( s_contaS       ),
        .zeraR       ( s_zeraR        ),
        .registraR   ( s_registraR    ),
        .ganhou      ( ganhou         ),
        .perdeu      ( perdeu         ),
        .pronto      ( pronto         ),
        .db_estado   ( s_estado       ),
        .deu_timeout ( timeout        ),
        .contaT      ( s_contaT       ),
        .nivel_uc    ( s_nivel        ),
        .zeraT       ( s_zeraT        ),
        .leds        ( leds           )
    );

    // Display das botoes
    hexa7seg HEX2 (
        .hexa    ( s_jogada_feita  ),
        .display ( db_jogada_feita )
    );

    // Display dos endereços codificados
    hexa7seg HEX0 (
        .hexa    ( s_contagem  ),
        .display ( db_contagem )
    );

    // Display do conteúdo em uma posição de memória
    hexa7seg HEX1 (
        .hexa    ( s_memoria  ),
        .display ( db_memoria )
    );

    // Display do estado atual
    hexa7seg HEX5 (
        .hexa    ( s_estado  ),
        .display ( db_estado )
    );

    // Display da sequência atual
    hexa7seg HEX3 (
        .hexa    ( s_sequencia  ),
        .display ( db_sequencia )
    );
endmodule

//------------------------------------------------------------------
// Arquivo   : exp4_fluxo_dados.v
// Projeto   : Experiencia 6 - Jogo da Memória
//------------------------------------------------------------------
// Descricao : Fluxo de Dados da Experiência 6
//             
//------------------------------------------------------------------
// Revisoes  :
//     Data        Versao  Autor             Descricao
//     25/01/2025  1.0     Ana Vitória       versao inicial
//------------------------------------------------------------------
//

module exp6_fluxo_dados (
    input clock,
    input [3:0] botoes,
    input nivel,
    input zeraT,
    input zeraR,
    input registraR,
    input contaE,
    input contaS,
    input contaT,
    input zeraE,
    input zeraS,
    output igual,
    output enderecoIgualSequencia,
    output fimE,
    output fimS,
    output [3:0] db_contagem,
    output [3:0] db_jogada_feita,
    output [3:0] db_memoria,
    output tem_jogada,
    output controle_timeout,
    output [3:0] db_sequencia,
    output controle_timeout_led,
    output enderecoMaiorQueSequencia
);

    wire [3:0] s_endereco;
    wire [3:0] s_dado;
    wire [3:0] s_botoes;
    wire [3:0] s_sequencia;
    wire [3:0] s_sequencia_fixo;
    wire s_tem_jogada = |botoes;
    wire rco;

    // mux
    mux2x1 mux (
        .D0 (&amp;s_endereco[2:0]),
        .D1 (rco),
        .SEL (nivel),
        .OUT (fimE)
    );

    // contador endereços
    contador_163 contEnd (
        .clock (clock),
        .clr   (~zeraE),
        .ld    (1&apos;b1),
        .ent   (1&apos;b1),
        .enp   (contaE),
        .D     (4&apos;b0),
        .Q     (s_endereco),
        .rco   (rco)
    );

    // contador sequencias
    contador_163 contLmt (
        .clock (clock),
        .clr   (~zeraS),
        .ld    (1&apos;b1),
        .ent   (1&apos;b1),
        .enp   (contaS),
        .D     (4&apos;b0),
        .Q     (s_sequencia),
        .rco   (fimS)
    );

    // comparador jogadas
    comparador_85 compJog (
        .A    (s_dado),
        .B    (s_botoes),
        .ALBi (1&apos;b0),
        .AGBi (1&apos;b0),
        .AEBi (1&apos;b1),
        .ALBo (),
        .AGBo (),
        .AEBo (igual)
    );

    // comparador sequencias
    comparador_85 compLmt (
        .A    (s_sequencia),
        .B    (s_endereco),
        .ALBi (1&apos;b0),
        .AGBi (1&apos;b0),
        .AEBi (1&apos;b1),
        .ALBo (),
        .AGBo (enderecoMaiorQueSequencia),
        .AEBo (enderecoIgualSequencia)
    );

    // memória
    sync_rom_16x4 memoria (
        .clock    (clock),
        .address  (s_endereco),
        .data_out (s_dado)
    );

    // registrador
    registrador_4 regBotoes (
        .clock  (clock),
        .clear  (zeraR),
        .enable (registraR),
        .D      (botoes),
        .Q      (s_botoes)
    );

    edge_detector detector (
        .clock (clock),
        .reset (zeraS),
        .sinal (s_tem_jogada),
        .pulso (jogada_feita)
    );

    contador_m #(.M(5000), .N(13)) contador_timeout (
        .clock   (clock),
        .zera_as (zeraC || zeraR),
        .zera_s  (zeraT),
        .conta   (contaT),
        .Q       (),
        .fim     (controle_timeout), 
        .decimo  (controle_timeout_led)
    );

    assign db_memoria  = s_dado;
    assign db_contagem = s_endereco;
    assign tem_jogada = s_tem_jogada;
    assign db_sequencia = s_sequencia;
endmodule

//------------------------------------------------------------------
// Arquivo   : exp6_unidade_controle.v
// Projeto   : Experiencia 6 - Jogo da Memória
//------------------------------------------------------------------
// Descricao : Unidade de controle
//         
//------------------------------------------------------------------
// Revisoes  :
//     Data        Versao  Autor                        Descricao
//     14/01/2024  1.0     Edson Midorikawa             versao inicial
//     12/01/2025  1.1     Edson Midorikawa             revisao
//     24/01/2025  1.2     Ana Murad, Heitor Gama       exercício
//------------------------------------------------------------------
//
module exp6_unidade_controle (
    input clock,
    input reset,
    input jogar,
    input nivel,
    input fimE,
    input igualE,
    input igualS,
    input tem_jogada,
    input timeout,
    input timeoutL,
    input maiorS,
    input [3:0] contagem,
    output reg zeraE,
    output reg contaE,
    output reg zeraS,
    output reg contaS,
    output reg zeraR,
    output reg registraR,
    output reg ganhou,
    output reg perdeu,
    output reg pronto,
    output reg [3:0] db_estado,
    output reg deu_timeout,
    output reg contaT,
    output reg nivel_uc,
    output reg zeraT,
    output reg [3:0] leds
);

    // Define estados
    parameter inicial     = 4&apos;b0000;  // 0
    parameter preparacao  = 4&apos;b0001;  // 1
    parameter nova_seq    = 4&apos;b0010;  // 2
    parameter mostra_leds = 4&apos;b1011;  // B
    parameter mostrou_led = 4&apos;b1100;  // C
    parameter resetar     = 4&apos;b1101;  // D
    parameter espera      = 4&apos;b0011;  // 3
    parameter registra    = 4&apos;b0100;  // 4
    parameter comparacao  = 4&apos;b0101;  // 5
    parameter proximo     = 4&apos;b0110;  // 6
    parameter fim_erro    = 4&apos;b1110;  // E
    parameter fim_acerto  = 4&apos;b1010;  // A
    parameter fim_timeout = 4&apos;b1111;  // F

    // Variaveis de estado
    reg [3:0] Eatual, Eprox;

    reg [10*8-1:0] Eatual_str;
    always@(Eatual) begin
        case(Eatual)
            inicial:     Eatual_str = &quot;inicial&quot;;
            preparacao:  Eatual_str = &quot;preparacao&quot;;
            nova_seq:    Eatual_str = &quot;nova_seq&quot;;
            mostra_leds: Eatual_str = &quot;mostra_leds&quot;;
            mostrou_led: Eatual_str = &quot;mostrou_leds&quot;;
            resetar:     Eatual_str = &quot;resetar&quot;;
            espera:      Eatual_str = &quot;espera&quot;;
            registra:    Eatual_str = &quot;registra&quot;;
            comparacao:  Eatual_str = &quot;comparacao&quot;;
            proximo:     Eatual_str = &quot;proximo&quot;;
            fim_acerto:  Eatual_str = &quot;fim_acerto&quot;;
            fim_erro:    Eatual_str = &quot;fim_erro&quot;;
            fim_timeout: Eatual_str = &quot;fim_timeout&quot;;
            default:     Eatual_str = &quot;UNKNOWN&quot;;
        endcase
    end

    // Memoria de estado
    always @(posedge clock or posedge reset) begin
        if (reset)
            Eatual &lt;= inicial;
        else
            Eatual &lt;= Eprox;
    end

    // Logica de proximo estado
    always @* begin
        case (Eatual)
            inicial:     Eprox = jogar ? preparacao : inicial;
            preparacao:  Eprox = mostra_leds;
            nova_seq:    Eprox = mostra_leds;
            mostra_leds: Eprox = maiorS ? resetar : (timeoutL ? mostrou_led : mostra_leds);
            mostrou_led: Eprox = mostra_leds;
            resetar:     Eprox = espera;
            espera:      Eprox = timeout ? fim_timeout : (tem_jogada ? registra : espera);
            registra:    Eprox = comparacao;
            comparacao:  Eprox = igualE ? (fimE ? fim_acerto : (igualS ? nova_seq : proximo)) : fim_erro;
            proximo:     Eprox = espera;
            fim_acerto:  Eprox = jogar ? preparacao : fim_acerto;
            fim_erro:    Eprox = jogar ? preparacao : fim_erro;
            fim_timeout: Eprox = jogar ? preparacao : fim_timeout;
            default:     Eprox = inicial;
        endcase
    end

    // Logica de saida (maquina Moore)
    always @* begin
        zeraE       = (Eatual == inicial || Eatual == preparacao || Eatual == nova_seq || Eatual == resetar) ? 1&apos;b1 : 1&apos;b0;
        zeraR       = (Eatual == inicial) ? 1&apos;b1 : 1&apos;b0;
        registraR   = (Eatual == registra) ? 1&apos;b1 : 1&apos;b0;
        contaE      = (Eatual == proximo || Eatual == mostrou_led) ? 1&apos;b1 : 1&apos;b0;
        pronto      = (Eatual == fim_acerto || Eatual == fim_erro || Eatual == fim_timeout) ? 1&apos;b1 : 1&apos;b0;
        ganhou      = (Eatual == fim_acerto) ? 1&apos;b1 : 1&apos;b0;
        perdeu      = (Eatual == fim_erro || Eatual == fim_timeout) ? 1&apos;b1 : 1&apos;b0;
        deu_timeout = (Eatual == fim_timeout) ? 1&apos;b1 : 1&apos;b0;
        contaT      = (Eatual == espera || Eatual == mostra_leds) ? 1&apos;b1: 1&apos;b0;
        zeraS       = (Eatual == preparacao) ? 1&apos;b1 : 1&apos;b0;
        contaS      = (Eatual == nova_seq) ? 1&apos;b1 : 1&apos;b0;
        nivel_uc    = (Eatual == preparacao) ? nivel : nivel_uc;
		zeraT       = (Eatual == proximo || Eatual == nova_seq || Eatual == mostrou_led || Eatual == resetar) ? 1&apos;b1 : 1&apos;b0;
        leds        = (Eatual == mostra_leds) ? contagem : 4&apos;b0000;

        // Saida de depuracao (estado)
        case (Eatual)
            inicial:     db_estado = 4&apos;b0000;  // 0
            preparacao:  db_estado = 4&apos;b0001;  // 1
            nova_seq:    db_estado = 4&apos;b0010;  // 2
            mostra_leds: db_estado = 4&apos;b1011;  // B
            mostrou_led: db_estado = 4&apos;b1100;  // C
            resetar:     db_estado = 4&apos;b1101;  // D
            espera:      db_estado = 4&apos;b0011;  // 3
            registra:    db_estado = 4&apos;b0100;  // 4
            comparacao:  db_estado = 4&apos;b0101;  // 5
            proximo:     db_estado = 4&apos;b0110;  // 6
            fim_acerto:  db_estado = 4&apos;b1010;  // A
            fim_erro:    db_estado = 4&apos;b1110;  // E
            fim_timeout: db_estado = 4&apos;b1111;  // F (deu ruim)
            default:     db_estado = 4&apos;b1001;  // 9
        endcase
    end
endmodule


/* -----------------------------------------------------------------
 *  Arquivo   : comparador_85.v
 *  Projeto   : Experiencia 2 - Um Fluxo de Dados Simples
 * -----------------------------------------------------------------
 * Descricao : comparador de magnitude de 4 bits 
 *             similar ao CI 7485
 *             baseado em descricao comportamental disponivel em	
 * https://web.eecs.umich.edu/~jhayes/iscas.restore/74L85b.v
 * -----------------------------------------------------------------
 * Revisoes  :
 *     Data        Versao  Autor             Descricao
 *     21/12/2023  1.0     Edson Midorikawa  criacao
 * -----------------------------------------------------------------
 */

module comparador_85 (ALBi, AGBi, AEBi, A, B, ALBo, AGBo, AEBo);

    input[3:0] A, B;
    input      ALBi, AGBi, AEBi;
    output     ALBo, AGBo, AEBo;
    wire[4:0]  CSL, CSG;

    assign CSL  = ~A + B + ALBi;
    assign ALBo = ~CSL[4];
    assign CSG  = A + ~B + AGBi;
    assign AGBo = ~CSG[4];
    assign AEBo = ((A == B) &amp;&amp; AEBi);

endmodule /* comparador_85 */

//------------------------------------------------------------------
// Arquivo   : contador_163.v
// Projeto   : Experiencia 2 - Um Fluxo de Dados Simples
//------------------------------------------------------------------
// Descricao : Contador binario de 4 bits, modulo 16
//             similar ao componente 74163
//
// baseado no componente Vrcntr4u.v do livro Digital Design Principles 
// and Practices, Fifth Edition, by John F. Wakerly              
//------------------------------------------------------------------
// Revisoes  :
//     Data        Versao  Autor             Descricao
//     14/12/2023  1.0     Edson Midorikawa  versao inicial
//------------------------------------------------------------------
//
module contador_163 ( clock, clr, ld, ent, enp, D, Q, rco );
    input clock, clr, ld, ent, enp;
    input [3:0] D;
    output reg [3:0] Q;
    output reg rco;

    always @ (posedge clock)
        if (~clr)               Q &lt;= 4&apos;d0;
        else if (~ld)           Q &lt;= D;
        else if (ent &amp;&amp; enp)    Q &lt;= Q + 1&apos;b1;
        else                    Q &lt;= Q;
 
    always @ (Q or ent)
        if (ent &amp;&amp; (Q == 4&apos;d15))   rco = 1;
        else                       rco = 0;
endmodule


/*---------------Laboratorio Digital-------------------------------------
 * Arquivo   : contador_m.v
 * Projeto   : Experiencia 4 - Desenvolvimento de Projeto de 
 *                             Circuitos Digitais em FPGA
 *-----------------------------------------------------------------------
 * Descricao : contador binario, modulo m, com parametros 
 *             M (modulo do contador) e N (numero de bits),
 *             sinais para clear assincrono (zera_as) e sincrono (zera_s)
 *             e saidas de fim e decimo de contagem
 *             
 *-----------------------------------------------------------------------
 * Revisoes  :
 *     Data        Versao  Autor             Descricao
 *     30/01/2024  1.0     Edson Midorikawa  criacao
 *     16/01/2025  1.1     Edson Midorikawa  revisao
 *-----------------------------------------------------------------------
 */

module contador_m #(parameter M=100, N=7)
  (
   input  wire          clock,
   input  wire          zera_as,
   input  wire          zera_s,
   input  wire          conta,
   output reg  [N-1:0]  Q,
   output reg           fim,
   output reg           decimo
  );

  always @(posedge clock or posedge zera_as) begin
    if (zera_as) begin
      Q &lt;= 0;
    end else if (clock) begin
      if (zera_s) begin
        Q &lt;= 0;
      end else if (conta) begin
        if (Q == M-1) begin
          Q &lt;= 0;
        end else begin
          Q &lt;= Q + 1&apos;b1;
        end
      end
    end
  end

  // Saidas
  always @ (Q)
      if (Q == M-1)   fim = 1;
      else            fim = 0;

  always @ (Q)
      if (Q == M/10-1) decimo = 1;
      else             decimo = 0;

endmodule

/* ------------------------------------------------------------------------
 *  Arquivo   : edge_detector.v
 *  Projeto   : Experiencia 4 - Desenvolvimento de Projeto de
 *                              Circuitos Digitais com FPGA
 * ------------------------------------------------------------------------
 *  Descricao : detector de borda
 *              gera um pulso na saida de 1 periodo de clock
 *              a partir da detecao da borda de subida sa entrada
 *
 *              sinal de reset ativo em alto
 *
 *              &gt; codigo adaptado a partir de codigo VHDL disponivel em
 *                https://surf-vhdl.com/how-to-design-a-good-edge-detector/
 * ------------------------------------------------------------------------
 *  Revisoes  :
 *      Data        Versao  Autor             Descricao
 *      26/01/2024  1.0     Edson Midorikawa  versao inicial
 * ------------------------------------------------------------------------
 */

module edge_detector (
    input  clock,
    input  reset,
    input  sinal,
    output pulso
);

    reg reg0;
    reg reg1;

    always @(posedge clock or posedge reset) begin
        if (reset) begin
            reg0 &lt;= 1&apos;b0;
            reg1 &lt;= 1&apos;b0;
        end else if (clock) begin
            reg0 &lt;= sinal;
            reg1 &lt;= reg0;
        end
    end

    assign pulso = ~reg1 &amp; reg0;

endmodule

/* ----------------------------------------------------------------
 * Arquivo   : hexa7seg.v
 * Projeto   : Experiencia 2 - Um Fluxo de Dados Simples
 *--------------------------------------------------------------
 * Descricao : decodificador hexadecimal para 
 *             display de 7 segmentos 
 * 
 * entrada : hexa - codigo binario de 4 bits hexadecimal
 * saida   : sseg - codigo de 7 bits para display de 7 segmentos
 *
 * baseado no componente bcd7seg.v da Intel FPGA
 *--------------------------------------------------------------
 * dica de uso: mapeamento para displays da placa DE0-CV
 *              bit 6 mais significativo é o bit a esquerda
 *              p.ex. sseg(6) -&gt; HEX0[6] ou HEX06
 *--------------------------------------------------------------
 * Revisoes  :
 *     Data        Versao  Autor             Descricao
 *     24/12/2023  1.0     Edson Midorikawa  criacao
 *--------------------------------------------------------------
 */

module hexa7seg (hexa, display);
    input      [3:0] hexa;
    output reg [6:0] display;

    /*
     *    ---
     *   | 0 |
     * 5 |   | 1
     *   |   |
     *    ---
     *   | 6 |
     * 4 |   | 2
     *   |   |
     *    ---
     *     3
     */
        
    always @(hexa)
    case (hexa)
        4&apos;h0:    display = 7&apos;b1000000;
        4&apos;h1:    display = 7&apos;b1111001;
        4&apos;h2:    display = 7&apos;b0100100;
        4&apos;h3:    display = 7&apos;b0110000;
        4&apos;h4:    display = 7&apos;b0011001;
        4&apos;h5:    display = 7&apos;b0010010;
        4&apos;h6:    display = 7&apos;b0000010;
        4&apos;h7:    display = 7&apos;b1111000;
        4&apos;h8:    display = 7&apos;b0000000;
        4&apos;h9:    display = 7&apos;b0010000;
        4&apos;ha:    display = 7&apos;b0001000;
        4&apos;hb:    display = 7&apos;b0000011;
        4&apos;hc:    display = 7&apos;b1000110;
        4&apos;hd:    display = 7&apos;b0100001;
        4&apos;he:    display = 7&apos;b0000110;
        4&apos;hf:    display = 7&apos;b0001110;
        default: display = 7&apos;b1111111;
    endcase
endmodule


/*------------------------------------------------------------------------
 * Arquivo   : mux2x1.v
 * Projeto   : Jogo do Desafio da Memoria
 *------------------------------------------------------------------------
 * Descricao : multiplexador 2x1
 * 
 * adaptado a partir do codigo my_4t1_mux.vhd do livro &quot;Free Range VHDL&quot;
 * 
 * exemplo de uso: ver testbench mux2x1_tb.v
 *------------------------------------------------------------------------
 * Revisoes  :
 *     Data        Versao  Autor             Descricao
 *     15/02/2024  1.0     Edson Midorikawa  criacao
 *     31/01/2025  1.1     Edson Midorikawa  revisao
 *------------------------------------------------------------------------
 */

module mux2x1 (
    input      D0,
    input      D1,
    input      SEL,
    output reg OUT
);

always @(*) begin
    case (SEL)
        1&apos;b0:    OUT = D0;
        1&apos;b1:    OUT = D1;
        default: OUT = 0; // saida em 0
    endcase
end

endmodule


//------------------------------------------------------------------
// Arquivo   : registrador_4.v
// Projeto   : Experiencia 3 - Projeto de uma Unidade de Controle 
//------------------------------------------------------------------
// Descricao : Registrador de 4 bits
//             
//------------------------------------------------------------------
// Revisoes  :
//     Data        Versao  Autor             Descricao
//     14/12/2023  1.0     Edson Midorikawa  versao inicial
//------------------------------------------------------------------
//
module registrador_4 (
    input        clock,
    input        clear,
    input        enable,
    input  [3:0] D,
    output [3:0] Q
);

    reg [3:0] IQ;

    always @(posedge clock or posedge clear) begin
        if (clear)
            IQ &lt;= 0;
        else if (enable)
            IQ &lt;= D;
    end

    assign Q = IQ;

endmodule


//------------------------------------------------------------------
// Arquivo   : sync_rom_16x4.v
// Projeto   : Experiencia 3 - Projeto de uma Unidade de Controle 
//------------------------------------------------------------------
// Descricao : ROM sincrona 16x4 (conteúdo pre-programado)
//             
//------------------------------------------------------------------
// Revisoes  :
//     Data        Versao  Autor             Descricao
//     14/12/2023  1.0     Edson Midorikawa  versao inicial
//------------------------------------------------------------------
//
module sync_rom_16x4 (clock, address, data_out);
    input            clock;
    input      [3:0] address;
    output reg [3:0] data_out;

    always @ (posedge clock)
    begin
        case (address)
            4&apos;b0000: data_out = 4&apos;b0001;
            4&apos;b0001: data_out = 4&apos;b0010;
            4&apos;b0010: data_out = 4&apos;b0100;
            4&apos;b0011: data_out = 4&apos;b1000;
            4&apos;b0100: data_out = 4&apos;b0100;
            4&apos;b0101: data_out = 4&apos;b0010;
            4&apos;b0110: data_out = 4&apos;b0001;
            4&apos;b0111: data_out = 4&apos;b0001;
            4&apos;b1000: data_out = 4&apos;b0010;
            4&apos;b1001: data_out = 4&apos;b0010;
            4&apos;b1010: data_out = 4&apos;b0100;
            4&apos;b1011: data_out = 4&apos;b0100;
            4&apos;b1100: data_out = 4&apos;b1000;
            4&apos;b1101: data_out = 4&apos;b1000;
            4&apos;b1110: data_out = 4&apos;b0001;
            4&apos;b1111: data_out = 4&apos;b0100;
        endcase
    end
endmodule</string>
        </entry>
      </elementAttributes>
      <pos x="740" y="-400"/>
    </visualElement>
    <visualElement>
      <elementName>Seven-Seg</elementName>
      <elementAttributes/>
      <pos x="1680" y="-820"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>Input Splitting</string>
          <string>8</string>
        </entry>
        <entry>
          <string>Output Splitting</string>
          <string>1*8</string>
        </entry>
      </elementAttributes>
      <pos x="1560" y="-580"/>
    </visualElement>
    <visualElement>
      <elementName>Ground</elementName>
      <elementAttributes/>
      <pos x="1160" y="-560"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>Input Splitting</string>
          <string>7,1</string>
        </entry>
      </elementAttributes>
      <pos x="1220" y="-580"/>
    </visualElement>
    <visualElement>
      <elementName>Not</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>8</int>
        </entry>
      </elementAttributes>
      <pos x="1380" y="-580"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>SEQUENCIA</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>7</int>
        </entry>
        <entry>
          <string>intFormat</string>
          <intFormat>bin</intFormat>
        </entry>
      </elementAttributes>
      <pos x="2060" y="-220"/>
    </visualElement>
    <visualElement>
      <elementName>Seven-Seg</elementName>
      <elementAttributes/>
      <pos x="2380" y="-420"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>Input Splitting</string>
          <string>8</string>
        </entry>
        <entry>
          <string>Output Splitting</string>
          <string>1*8</string>
        </entry>
      </elementAttributes>
      <pos x="2260" y="-180"/>
    </visualElement>
    <visualElement>
      <elementName>Ground</elementName>
      <elementAttributes/>
      <pos x="1860" y="-160"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>Input Splitting</string>
          <string>7,1</string>
        </entry>
      </elementAttributes>
      <pos x="1920" y="-180"/>
    </visualElement>
    <visualElement>
      <elementName>Not</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>8</int>
        </entry>
      </elementAttributes>
      <pos x="2080" y="-180"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>ESTADO</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>7</int>
        </entry>
        <entry>
          <string>intFormat</string>
          <intFormat>bin</intFormat>
        </entry>
      </elementAttributes>
      <pos x="2080" y="160"/>
    </visualElement>
    <visualElement>
      <elementName>Seven-Seg</elementName>
      <elementAttributes/>
      <pos x="2400" y="-40"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>Input Splitting</string>
          <string>8</string>
        </entry>
        <entry>
          <string>Output Splitting</string>
          <string>1*8</string>
        </entry>
      </elementAttributes>
      <pos x="2280" y="200"/>
    </visualElement>
    <visualElement>
      <elementName>Ground</elementName>
      <elementAttributes/>
      <pos x="1880" y="220"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>Input Splitting</string>
          <string>7,1</string>
        </entry>
      </elementAttributes>
      <pos x="1940" y="200"/>
    </visualElement>
    <visualElement>
      <elementName>Not</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>8</int>
        </entry>
      </elementAttributes>
      <pos x="2100" y="200"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>MEMORIA</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>7</int>
        </entry>
        <entry>
          <string>intFormat</string>
          <intFormat>bin</intFormat>
        </entry>
      </elementAttributes>
      <pos x="2060" y="-620"/>
    </visualElement>
    <visualElement>
      <elementName>Seven-Seg</elementName>
      <elementAttributes/>
      <pos x="2380" y="-820"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>Input Splitting</string>
          <string>8</string>
        </entry>
        <entry>
          <string>Output Splitting</string>
          <string>1*8</string>
        </entry>
      </elementAttributes>
      <pos x="2260" y="-580"/>
    </visualElement>
    <visualElement>
      <elementName>Ground</elementName>
      <elementAttributes/>
      <pos x="1860" y="-560"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>Input Splitting</string>
          <string>7,1</string>
        </entry>
      </elementAttributes>
      <pos x="1920" y="-580"/>
    </visualElement>
    <visualElement>
      <elementName>Not</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>8</int>
        </entry>
      </elementAttributes>
      <pos x="2080" y="-580"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>JOGADA_FEITA</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>7</int>
        </entry>
        <entry>
          <string>intFormat</string>
          <intFormat>bin</intFormat>
        </entry>
      </elementAttributes>
      <pos x="1260" y="160"/>
    </visualElement>
    <visualElement>
      <elementName>Seven-Seg</elementName>
      <elementAttributes/>
      <pos x="1580" y="-40"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>Input Splitting</string>
          <string>8</string>
        </entry>
        <entry>
          <string>Output Splitting</string>
          <string>1*8</string>
        </entry>
      </elementAttributes>
      <pos x="1460" y="200"/>
    </visualElement>
    <visualElement>
      <elementName>Ground</elementName>
      <elementAttributes/>
      <pos x="1060" y="220"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>Input Splitting</string>
          <string>7,1</string>
        </entry>
      </elementAttributes>
      <pos x="1120" y="200"/>
    </visualElement>
    <visualElement>
      <elementName>Not</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>8</int>
        </entry>
      </elementAttributes>
      <pos x="1280" y="200"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>LEDS</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>4</int>
        </entry>
        <entry>
          <string>intFormat</string>
          <intFormat>bin</intFormat>
        </entry>
      </elementAttributes>
      <pos x="1420" y="-320"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>PRONTO</string>
        </entry>
        <entry>
          <string>intFormat</string>
          <intFormat>bin</intFormat>
        </entry>
      </elementAttributes>
      <pos x="1420" y="-400"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>TIMEOUT</string>
        </entry>
        <entry>
          <string>intFormat</string>
          <intFormat>bin</intFormat>
        </entry>
      </elementAttributes>
      <pos x="1420" y="-440"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>PERDEU</string>
        </entry>
        <entry>
          <string>intFormat</string>
          <intFormat>bin</intFormat>
        </entry>
      </elementAttributes>
      <pos x="1420" y="-480"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>GANHOU</string>
        </entry>
        <entry>
          <string>intFormat</string>
          <intFormat>bin</intFormat>
        </entry>
      </elementAttributes>
      <pos x="1420" y="-520"/>
    </visualElement>
  </visualElements>
  <wires>
    <wire>
      <p1 x="2340" y="-260"/>
      <p2 x="2380" y="-260"/>
    </wire>
    <wire>
      <p1 x="1060" y="-260"/>
      <p2 x="1700" y="-260"/>
    </wire>
    <wire>
      <p1 x="1880" y="-580"/>
      <p2 x="1920" y="-580"/>
    </wire>
    <wire>
      <p1 x="1940" y="-580"/>
      <p2 x="2080" y="-580"/>
    </wire>
    <wire>
      <p1 x="2120" y="-580"/>
      <p2 x="2260" y="-580"/>
    </wire>
    <wire>
      <p1 x="1180" y="-580"/>
      <p2 x="1220" y="-580"/>
    </wire>
    <wire>
      <p1 x="1240" y="-580"/>
      <p2 x="1380" y="-580"/>
    </wire>
    <wire>
      <p1 x="1420" y="-580"/>
      <p2 x="1560" y="-580"/>
    </wire>
    <wire>
      <p1 x="2400" y="-200"/>
      <p2 x="2440" y="-200"/>
    </wire>
    <wire>
      <p1 x="1340" y="-200"/>
      <p2 x="1780" y="-200"/>
    </wire>
    <wire>
      <p1 x="2280" y="-840"/>
      <p2 x="2400" y="-840"/>
    </wire>
    <wire>
      <p1 x="1580" y="-840"/>
      <p2 x="1700" y="-840"/>
    </wire>
    <wire>
      <p1 x="1340" y="-520"/>
      <p2 x="1420" y="-520"/>
    </wire>
    <wire>
      <p1 x="1900" y="200"/>
      <p2 x="1940" y="200"/>
    </wire>
    <wire>
      <p1 x="1960" y="200"/>
      <p2 x="2100" y="200"/>
    </wire>
    <wire>
      <p1 x="2140" y="200"/>
      <p2 x="2280" y="200"/>
    </wire>
    <wire>
      <p1 x="1080" y="200"/>
      <p2 x="1120" y="200"/>
    </wire>
    <wire>
      <p1 x="1140" y="200"/>
      <p2 x="1280" y="200"/>
    </wire>
    <wire>
      <p1 x="1320" y="200"/>
      <p2 x="1460" y="200"/>
    </wire>
    <wire>
      <p1 x="2300" y="-140"/>
      <p2 x="2480" y="-140"/>
    </wire>
    <wire>
      <p1 x="2420" y="-460"/>
      <p2 x="2480" y="-460"/>
    </wire>
    <wire>
      <p1 x="2380" y="140"/>
      <p2 x="2420" y="140"/>
    </wire>
    <wire>
      <p1 x="1560" y="140"/>
      <p2 x="1600" y="140"/>
    </wire>
    <wire>
      <p1 x="2440" y="-80"/>
      <p2 x="2500" y="-80"/>
    </wire>
    <wire>
      <p1 x="1620" y="-80"/>
      <p2 x="1680" y="-80"/>
    </wire>
    <wire>
      <p1 x="700" y="-400"/>
      <p2 x="740" y="-400"/>
    </wire>
    <wire>
      <p1 x="1060" y="-400"/>
      <p2 x="1340" y="-400"/>
    </wire>
    <wire>
      <p1 x="1400" y="-400"/>
      <p2 x="1420" y="-400"/>
    </wire>
    <wire>
      <p1 x="1780" y="80"/>
      <p2 x="1900" y="80"/>
    </wire>
    <wire>
      <p1 x="1040" y="80"/>
      <p2 x="1080" y="80"/>
    </wire>
    <wire>
      <p1 x="2340" y="-660"/>
      <p2 x="2380" y="-660"/>
    </wire>
    <wire>
      <p1 x="1640" y="-660"/>
      <p2 x="1680" y="-660"/>
    </wire>
    <wire>
      <p1 x="680" y="-340"/>
      <p2 x="740" y="-340"/>
    </wire>
    <wire>
      <p1 x="1060" y="-340"/>
      <p2 x="1400" y="-340"/>
    </wire>
    <wire>
      <p1 x="1060" y="-280"/>
      <p2 x="1820" y="-280"/>
    </wire>
    <wire>
      <p1 x="2400" y="-600"/>
      <p2 x="2440" y="-600"/>
    </wire>
    <wire>
      <p1 x="1700" y="-600"/>
      <p2 x="1740" y="-600"/>
    </wire>
    <wire>
      <p1 x="1600" y="-540"/>
      <p2 x="1780" y="-540"/>
    </wire>
    <wire>
      <p1 x="2300" y="-540"/>
      <p2 x="2480" y="-540"/>
    </wire>
    <wire>
      <p1 x="1720" y="-860"/>
      <p2 x="1780" y="-860"/>
    </wire>
    <wire>
      <p1 x="2420" y="-860"/>
      <p2 x="2480" y="-860"/>
    </wire>
    <wire>
      <p1 x="1700" y="-220"/>
      <p2 x="1880" y="-220"/>
    </wire>
    <wire>
      <p1 x="2380" y="-220"/>
      <p2 x="2420" y="-220"/>
    </wire>
    <wire>
      <p1 x="1060" y="-220"/>
      <p2 x="1260" y="-220"/>
    </wire>
    <wire>
      <p1 x="1880" y="-220"/>
      <p2 x="2060" y="-220"/>
    </wire>
    <wire>
      <p1 x="1880" y="220"/>
      <p2 x="1940" y="220"/>
    </wire>
    <wire>
      <p1 x="1060" y="220"/>
      <p2 x="1120" y="220"/>
    </wire>
    <wire>
      <p1 x="1860" y="-160"/>
      <p2 x="1920" y="-160"/>
    </wire>
    <wire>
      <p1 x="2320" y="-480"/>
      <p2 x="2440" y="-480"/>
    </wire>
    <wire>
      <p1 x="500" y="-480"/>
      <p2 x="700" y="-480"/>
    </wire>
    <wire>
      <p1 x="1360" y="-480"/>
      <p2 x="1420" y="-480"/>
    </wire>
    <wire>
      <p1 x="1900" y="160"/>
      <p2 x="2080" y="160"/>
    </wire>
    <wire>
      <p1 x="2400" y="160"/>
      <p2 x="2440" y="160"/>
    </wire>
    <wire>
      <p1 x="1080" y="160"/>
      <p2 x="1260" y="160"/>
    </wire>
    <wire>
      <p1 x="1580" y="160"/>
      <p2 x="1620" y="160"/>
    </wire>
    <wire>
      <p1 x="2260" y="-420"/>
      <p2 x="2380" y="-420"/>
    </wire>
    <wire>
      <p1 x="500" y="-420"/>
      <p2 x="680" y="-420"/>
    </wire>
    <wire>
      <p1 x="2340" y="-100"/>
      <p2 x="2460" y="-100"/>
    </wire>
    <wire>
      <p1 x="1520" y="-100"/>
      <p2 x="1640" y="-100"/>
    </wire>
    <wire>
      <p1 x="1040" y="-100"/>
      <p2 x="1260" y="-100"/>
    </wire>
    <wire>
      <p1 x="2280" y="-40"/>
      <p2 x="2400" y="-40"/>
    </wire>
    <wire>
      <p1 x="1460" y="-40"/>
      <p2 x="1580" y="-40"/>
    </wire>
    <wire>
      <p1 x="500" y="-360"/>
      <p2 x="740" y="-360"/>
    </wire>
    <wire>
      <p1 x="1060" y="-360"/>
      <p2 x="1380" y="-360"/>
    </wire>
    <wire>
      <p1 x="1060" y="-300"/>
      <p2 x="1120" y="-300"/>
    </wire>
    <wire>
      <p1 x="500" y="-300"/>
      <p2 x="680" y="-300"/>
    </wire>
    <wire>
      <p1 x="1120" y="-620"/>
      <p2 x="1180" y="-620"/>
    </wire>
    <wire>
      <p1 x="1680" y="-620"/>
      <p2 x="1720" y="-620"/>
    </wire>
    <wire>
      <p1 x="1820" y="-620"/>
      <p2 x="1880" y="-620"/>
    </wire>
    <wire>
      <p1 x="2380" y="-620"/>
      <p2 x="2420" y="-620"/>
    </wire>
    <wire>
      <p1 x="1880" y="-620"/>
      <p2 x="2060" y="-620"/>
    </wire>
    <wire>
      <p1 x="1180" y="-620"/>
      <p2 x="1360" y="-620"/>
    </wire>
    <wire>
      <p1 x="1160" y="-560"/>
      <p2 x="1220" y="-560"/>
    </wire>
    <wire>
      <p1 x="1860" y="-560"/>
      <p2 x="1920" y="-560"/>
    </wire>
    <wire>
      <p1 x="1620" y="-880"/>
      <p2 x="1740" y="-880"/>
    </wire>
    <wire>
      <p1 x="2320" y="-880"/>
      <p2 x="2440" y="-880"/>
    </wire>
    <wire>
      <p1 x="2360" y="-240"/>
      <p2 x="2400" y="-240"/>
    </wire>
    <wire>
      <p1 x="1060" y="-240"/>
      <p2 x="1340" y="-240"/>
    </wire>
    <wire>
      <p1 x="500" y="-240"/>
      <p2 x="700" y="-240"/>
    </wire>
    <wire>
      <p1 x="2320" y="240"/>
      <p2 x="2500" y="240"/>
    </wire>
    <wire>
      <p1 x="1500" y="240"/>
      <p2 x="1680" y="240"/>
    </wire>
    <wire>
      <p1 x="1880" y="-180"/>
      <p2 x="1920" y="-180"/>
    </wire>
    <wire>
      <p1 x="1940" y="-180"/>
      <p2 x="2080" y="-180"/>
    </wire>
    <wire>
      <p1 x="2120" y="-180"/>
      <p2 x="2260" y="-180"/>
    </wire>
    <wire>
      <p1 x="2260" y="-820"/>
      <p2 x="2380" y="-820"/>
    </wire>
    <wire>
      <p1 x="1560" y="-820"/>
      <p2 x="1680" y="-820"/>
    </wire>
    <wire>
      <p1 x="2420" y="180"/>
      <p2 x="2460" y="180"/>
    </wire>
    <wire>
      <p1 x="1600" y="180"/>
      <p2 x="1640" y="180"/>
    </wire>
    <wire>
      <p1 x="2280" y="-440"/>
      <p2 x="2400" y="-440"/>
    </wire>
    <wire>
      <p1 x="1380" y="-440"/>
      <p2 x="1420" y="-440"/>
    </wire>
    <wire>
      <p1 x="2360" y="120"/>
      <p2 x="2400" y="120"/>
    </wire>
    <wire>
      <p1 x="1540" y="120"/>
      <p2 x="1580" y="120"/>
    </wire>
    <wire>
      <p1 x="2300" y="-60"/>
      <p2 x="2420" y="-60"/>
    </wire>
    <wire>
      <p1 x="1480" y="-60"/>
      <p2 x="1600" y="-60"/>
    </wire>
    <wire>
      <p1 x="680" y="-380"/>
      <p2 x="740" y="-380"/>
    </wire>
    <wire>
      <p1 x="1060" y="-380"/>
      <p2 x="1360" y="-380"/>
    </wire>
    <wire>
      <p1 x="700" y="-320"/>
      <p2 x="740" y="-320"/>
    </wire>
    <wire>
      <p1 x="1060" y="-320"/>
      <p2 x="1420" y="-320"/>
    </wire>
    <wire>
      <p1 x="1660" y="-640"/>
      <p2 x="1700" y="-640"/>
    </wire>
    <wire>
      <p1 x="2360" y="-640"/>
      <p2 x="2400" y="-640"/>
    </wire>
    <wire>
      <p1 x="1600" y="-60"/>
      <p2 x="1600" y="-40"/>
    </wire>
    <wire>
      <p1 x="1600" y="100"/>
      <p2 x="1600" y="140"/>
    </wire>
    <wire>
      <p1 x="1600" y="-600"/>
      <p2 x="1600" y="-540"/>
    </wire>
    <wire>
      <p1 x="2500" y="-80"/>
      <p2 x="2500" y="240"/>
    </wire>
    <wire>
      <p1 x="1540" y="120"/>
      <p2 x="1540" y="180"/>
    </wire>
    <wire>
      <p1 x="2440" y="-280"/>
      <p2 x="2440" y="-200"/>
    </wire>
    <wire>
      <p1 x="2440" y="-480"/>
      <p2 x="2440" y="-420"/>
    </wire>
    <wire>
      <p1 x="2440" y="100"/>
      <p2 x="2440" y="160"/>
    </wire>
    <wire>
      <p1 x="2440" y="-80"/>
      <p2 x="2440" y="-40"/>
    </wire>
    <wire>
      <p1 x="2440" y="-680"/>
      <p2 x="2440" y="-600"/>
    </wire>
    <wire>
      <p1 x="2440" y="-880"/>
      <p2 x="2440" y="-820"/>
    </wire>
    <wire>
      <p1 x="1480" y="-60"/>
      <p2 x="1480" y="180"/>
    </wire>
    <wire>
      <p1 x="2380" y="-220"/>
      <p2 x="2380" y="-200"/>
    </wire>
    <wire>
      <p1 x="2380" y="-280"/>
      <p2 x="2380" y="-260"/>
    </wire>
    <wire>
      <p1 x="2380" y="140"/>
      <p2 x="2380" y="180"/>
    </wire>
    <wire>
      <p1 x="2380" y="-620"/>
      <p2 x="2380" y="-600"/>
    </wire>
    <wire>
      <p1 x="2380" y="-680"/>
      <p2 x="2380" y="-660"/>
    </wire>
    <wire>
      <p1 x="1740" y="-680"/>
      <p2 x="1740" y="-600"/>
    </wire>
    <wire>
      <p1 x="1740" y="-880"/>
      <p2 x="1740" y="-820"/>
    </wire>
    <wire>
      <p1 x="2320" y="-480"/>
      <p2 x="2320" y="-200"/>
    </wire>
    <wire>
      <p1 x="2320" y="180"/>
      <p2 x="2320" y="240"/>
    </wire>
    <wire>
      <p1 x="2320" y="-880"/>
      <p2 x="2320" y="-600"/>
    </wire>
    <wire>
      <p1 x="1680" y="-80"/>
      <p2 x="1680" y="240"/>
    </wire>
    <wire>
      <p1 x="1680" y="-620"/>
      <p2 x="1680" y="-600"/>
    </wire>
    <wire>
      <p1 x="1680" y="-680"/>
      <p2 x="1680" y="-660"/>
    </wire>
    <wire>
      <p1 x="1040" y="-100"/>
      <p2 x="1040" y="80"/>
    </wire>
    <wire>
      <p1 x="1360" y="-480"/>
      <p2 x="1360" y="-380"/>
    </wire>
    <wire>
      <p1 x="2260" y="-420"/>
      <p2 x="2260" y="-200"/>
    </wire>
    <wire>
      <p1 x="2260" y="-820"/>
      <p2 x="2260" y="-600"/>
    </wire>
    <wire>
      <p1 x="1620" y="100"/>
      <p2 x="1620" y="160"/>
    </wire>
    <wire>
      <p1 x="1620" y="-80"/>
      <p2 x="1620" y="-40"/>
    </wire>
    <wire>
      <p1 x="1620" y="-880"/>
      <p2 x="1620" y="-600"/>
    </wire>
    <wire>
      <p1 x="1880" y="-220"/>
      <p2 x="1880" y="-180"/>
    </wire>
    <wire>
      <p1 x="1880" y="-620"/>
      <p2 x="1880" y="-580"/>
    </wire>
    <wire>
      <p1 x="1560" y="140"/>
      <p2 x="1560" y="180"/>
    </wire>
    <wire>
      <p1 x="1560" y="-820"/>
      <p2 x="1560" y="-600"/>
    </wire>
    <wire>
      <p1 x="2460" y="100"/>
      <p2 x="2460" y="180"/>
    </wire>
    <wire>
      <p1 x="2460" y="-100"/>
      <p2 x="2460" y="-40"/>
    </wire>
    <wire>
      <p1 x="1500" y="180"/>
      <p2 x="1500" y="240"/>
    </wire>
    <wire>
      <p1 x="1180" y="-620"/>
      <p2 x="1180" y="-580"/>
    </wire>
    <wire>
      <p1 x="1820" y="-620"/>
      <p2 x="1820" y="-280"/>
    </wire>
    <wire>
      <p1 x="2400" y="-440"/>
      <p2 x="2400" y="-420"/>
    </wire>
    <wire>
      <p1 x="2400" y="-280"/>
      <p2 x="2400" y="-240"/>
    </wire>
    <wire>
      <p1 x="2400" y="160"/>
      <p2 x="2400" y="180"/>
    </wire>
    <wire>
      <p1 x="2400" y="100"/>
      <p2 x="2400" y="120"/>
    </wire>
    <wire>
      <p1 x="2400" y="-840"/>
      <p2 x="2400" y="-820"/>
    </wire>
    <wire>
      <p1 x="2400" y="-680"/>
      <p2 x="2400" y="-640"/>
    </wire>
    <wire>
      <p1 x="1120" y="-620"/>
      <p2 x="1120" y="-300"/>
    </wire>
    <wire>
      <p1 x="2340" y="-260"/>
      <p2 x="2340" y="-200"/>
    </wire>
    <wire>
      <p1 x="2340" y="-100"/>
      <p2 x="2340" y="180"/>
    </wire>
    <wire>
      <p1 x="2340" y="-660"/>
      <p2 x="2340" y="-600"/>
    </wire>
    <wire>
      <p1 x="1700" y="-840"/>
      <p2 x="1700" y="-820"/>
    </wire>
    <wire>
      <p1 x="1700" y="-680"/>
      <p2 x="1700" y="-640"/>
    </wire>
    <wire>
      <p1 x="1700" y="-260"/>
      <p2 x="1700" y="-220"/>
    </wire>
    <wire>
      <p1 x="1380" y="-440"/>
      <p2 x="1380" y="-360"/>
    </wire>
    <wire>
      <p1 x="680" y="-420"/>
      <p2 x="680" y="-380"/>
    </wire>
    <wire>
      <p1 x="680" y="-340"/>
      <p2 x="680" y="-300"/>
    </wire>
    <wire>
      <p1 x="2280" y="-440"/>
      <p2 x="2280" y="-200"/>
    </wire>
    <wire>
      <p1 x="2280" y="-40"/>
      <p2 x="2280" y="180"/>
    </wire>
    <wire>
      <p1 x="2280" y="-840"/>
      <p2 x="2280" y="-600"/>
    </wire>
    <wire>
      <p1 x="1640" y="100"/>
      <p2 x="1640" y="180"/>
    </wire>
    <wire>
      <p1 x="1640" y="-100"/>
      <p2 x="1640" y="-40"/>
    </wire>
    <wire>
      <p1 x="1640" y="-660"/>
      <p2 x="1640" y="-600"/>
    </wire>
    <wire>
      <p1 x="1900" y="80"/>
      <p2 x="1900" y="160"/>
    </wire>
    <wire>
      <p1 x="1900" y="160"/>
      <p2 x="1900" y="200"/>
    </wire>
    <wire>
      <p1 x="1580" y="160"/>
      <p2 x="1580" y="180"/>
    </wire>
    <wire>
      <p1 x="1580" y="100"/>
      <p2 x="1580" y="120"/>
    </wire>
    <wire>
      <p1 x="1580" y="-840"/>
      <p2 x="1580" y="-600"/>
    </wire>
    <wire>
      <p1 x="1260" y="-220"/>
      <p2 x="1260" y="-100"/>
    </wire>
    <wire>
      <p1 x="2480" y="-460"/>
      <p2 x="2480" y="-140"/>
    </wire>
    <wire>
      <p1 x="2480" y="-860"/>
      <p2 x="2480" y="-540"/>
    </wire>
    <wire>
      <p1 x="1520" y="-100"/>
      <p2 x="1520" y="180"/>
    </wire>
    <wire>
      <p1 x="1780" y="-860"/>
      <p2 x="1780" y="-540"/>
    </wire>
    <wire>
      <p1 x="1780" y="-200"/>
      <p2 x="1780" y="80"/>
    </wire>
    <wire>
      <p1 x="2420" y="-280"/>
      <p2 x="2420" y="-220"/>
    </wire>
    <wire>
      <p1 x="2420" y="-460"/>
      <p2 x="2420" y="-420"/>
    </wire>
    <wire>
      <p1 x="2420" y="-60"/>
      <p2 x="2420" y="-40"/>
    </wire>
    <wire>
      <p1 x="2420" y="100"/>
      <p2 x="2420" y="140"/>
    </wire>
    <wire>
      <p1 x="2420" y="-680"/>
      <p2 x="2420" y="-620"/>
    </wire>
    <wire>
      <p1 x="2420" y="-860"/>
      <p2 x="2420" y="-820"/>
    </wire>
    <wire>
      <p1 x="1460" y="-40"/>
      <p2 x="1460" y="180"/>
    </wire>
    <wire>
      <p1 x="1720" y="-680"/>
      <p2 x="1720" y="-620"/>
    </wire>
    <wire>
      <p1 x="1720" y="-860"/>
      <p2 x="1720" y="-820"/>
    </wire>
    <wire>
      <p1 x="2360" y="-240"/>
      <p2 x="2360" y="-200"/>
    </wire>
    <wire>
      <p1 x="2360" y="120"/>
      <p2 x="2360" y="180"/>
    </wire>
    <wire>
      <p1 x="2360" y="-640"/>
      <p2 x="2360" y="-600"/>
    </wire>
    <wire>
      <p1 x="1080" y="80"/>
      <p2 x="1080" y="160"/>
    </wire>
    <wire>
      <p1 x="1080" y="160"/>
      <p2 x="1080" y="200"/>
    </wire>
    <wire>
      <p1 x="1400" y="-400"/>
      <p2 x="1400" y="-340"/>
    </wire>
    <wire>
      <p1 x="700" y="-480"/>
      <p2 x="700" y="-400"/>
    </wire>
    <wire>
      <p1 x="700" y="-320"/>
      <p2 x="700" y="-240"/>
    </wire>
    <wire>
      <p1 x="1660" y="-640"/>
      <p2 x="1660" y="-600"/>
    </wire>
    <wire>
      <p1 x="2300" y="-200"/>
      <p2 x="2300" y="-140"/>
    </wire>
    <wire>
      <p1 x="2300" y="-60"/>
      <p2 x="2300" y="180"/>
    </wire>
    <wire>
      <p1 x="2300" y="-600"/>
      <p2 x="2300" y="-540"/>
    </wire>
    <wire>
      <p1 x="1340" y="-240"/>
      <p2 x="1340" y="-200"/>
    </wire>
    <wire>
      <p1 x="1340" y="-520"/>
      <p2 x="1340" y="-400"/>
    </wire>
  </wires>
  <measurementOrdering/>
</circuit>