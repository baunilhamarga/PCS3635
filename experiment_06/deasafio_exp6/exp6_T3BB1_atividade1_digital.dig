<?xml version="1.0" encoding="utf-8"?>
<circuit>
  <version>2</version>
  <attributes/>
  <visualElements>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>small</string>
          <boolean>true</boolean>
        </entry>
        <entry>
          <string>addValueToGraph</string>
          <boolean>false</boolean>
        </entry>
        <entry>
          <string>Label</string>
          <string>CONTAGEM</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>7</int>
        </entry>
      </elementAttributes>
      <pos x="1480" y="-640"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>IVERILOG</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>jogo_desafio_memoria</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>clock,reset,jogar,botoes:4,memoria,nivel</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>16</int>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>ganhou,perdeu,timeout,pronto,leds:4,db_clock,db_tem_jogada,db_chavesIgualMemoria,db_enderecoIgualSequencia,db_fimS,db_contagem:7,db_memoria:7,db_jogadafeita:7,db_sequencia:7,db_estado:7,db_seletor_memoria,db_timeout,db_timeoutL</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>// --- Start of jogo_desafio_memoria.v ---
//------------------------------------------------------------------
// Arquivo   : jogo_desafio_memoria.v
// Projeto   : Experiencia 6 - Jogo da Memória
//------------------------------------------------------------------
// Descricao : Circuito da Experiência 6
//             
//------------------------------------------------------------------
// Revisoes  :
//     Data        Versao  Autor             Descricao
//     25/01/2025  1.0     Ana Vitória       versao inicial
//------------------------------------------------------------------
//
module jogo_desafio_memoria (
    input clock,
    input reset,
    input jogar,
    input [3:0] botoes,
    input memoria,
    input nivel,
    output ganhou,
    output perdeu,
    output timeout,
    output pronto,
    output [3:0] leds,
    output db_clock,
    output db_tem_jogada,
    output db_chavesIgualMemoria,
    output db_enderecoIgualSequencia,
    output db_fimS,
    output [6:0] db_contagem,
    output [6:0] db_memoria,
    output [6:0] db_jogadafeita,
    output [6:0] db_sequencia,
    output [6:0] db_estado,
    output db_seletor_memoria,
    // Nossos debugs
    output db_timeout,
    output db_timeoutL
);

    wire [3:0] s_jogadafeita;
    wire [3:0] s_contagem;
    wire [3:0] s_memoria;
    wire [3:0] s_estado;
    wire [3:0] s_sequencia;
    wire s_tem_jogada;
    wire s_fimE;
    wire s_fimS;
    wire s_igualE;
    wire s_fim_timeout;
    wire s_contaT;
    wire s_contaS;
    wire s_zeraS;
    wire s_contaE;
    wire s_zeraE;
    wire s_igualS;
    wire s_zeraR;
    wire s_registraR;
    wire s_nivel;
    wire s_zeraT;
    wire s_timeoutL;
    wire s_menorS;
    wire s_controla_leds;
    wire s_zeraT_leds;
    wire s_contaT_leds;
    wire s_fase_preview;

    // Fluxo de Dados
    exp6_fluxo_dados FD (
        .clock                     ( clock              ),
        .botoes                    ( botoes             ),
        .nivel                     ( s_nivel            ),
        .zeraT                     ( s_zeraT            ),
        .zeraR                     ( s_zeraR            ),
        .registraR                 ( s_registraR        ),
        .contaE                    ( s_contaE           ),
        .contaS                    ( s_contaS           ),
        .contaT                    ( s_contaT           ),
        .zeraE                     ( s_zeraE            ),
        .zeraS                     ( s_zeraS            ),
        .controla_leds             ( s_controla_leds    ),
        .zeraT_leds                ( s_zeraT_leds       ),
        .contaT_leds               ( s_contaT_leds      ),
        .fase_preview              ( s_fase_preview     ),
        .seletor_memoria           ( memoria            ),
        .igual                     ( s_igualE           ),
        .enderecoIgualSequencia    ( s_igualS           ),
        .fimE                      ( s_fimE             ),
        .fimS                      ( s_fimS             ),
        .db_contagem               ( s_contagem         ),
        .db_jogadafeita            ( s_jogadafeita      ),
        .db_memoria                ( s_memoria          ),
        .tem_jogada                ( s_tem_jogada       ),
        .controle_timeout          ( s_fim_timeout      ),
        .db_sequencia              ( s_sequencia        ),
        .controle_timeout_led      ( s_timeoutL         ),
        .sequenciaMenorQueEndereco ( s_menorS           ),
        .leds                      ( leds               ),
        .db_seletor_memoria        ( db_seletor_memoria )
    );

    // Unidade de Controle
    exp6_unidade_controle UC (
        .clock         ( clock          ),
        .reset         ( reset          ),
        .jogar         ( jogar          ),
        .nivel         ( nivel          ),
        .fimE          ( s_fimE         ),
        .igualE        ( s_igualE       ),
        .igualS        ( s_igualS       ),
        .tem_jogada    ( s_tem_jogada   ),
        .timeout       ( s_fim_timeout  ),
        .timeoutL      ( s_timeoutL     ),
        .menorS        ( s_menorS       ),
        .zeraE         ( s_zeraE        ),
        .contaE        ( s_contaE       ),
        .zeraS         ( s_zeraS        ),
        .contaS        ( s_contaS       ),
        .zeraR         ( s_zeraR        ),
        .registraR     ( s_registraR    ),
        .ganhou        ( ganhou         ),
        .perdeu        ( perdeu         ),
        .pronto        ( pronto         ),
        .db_estado     ( s_estado       ),
        .deu_timeout   ( timeout        ),
        .contaT        ( s_contaT       ),
        .nivel_uc      ( s_nivel        ),
        .zeraT         ( s_zeraT        ),
        .controla_leds ( s_controla_leds),
        .zeraT_leds    ( s_zeraT_leds   ),
        .contaT_leds   ( s_contaT_leds  ),
        .fase_preview  ( s_fase_preview )
    );

    // Display das botoes
    hexa7seg HEX2 (
        .hexa    ( s_jogadafeita  ),
        .display ( db_jogadafeita )
    );

    // Display dos endereços codificados
    hexa7seg HEX0 (
        .hexa    ( s_contagem  ),
        .display ( db_contagem )
    );

    // Display do conteúdo em uma posição de memória
    hexa7seg HEX1 (
        .hexa    ( s_memoria  ),
        .display ( db_memoria )
    );

    // Display do estado atual
    hexa7seg HEX5 (
        .hexa    ( s_estado  ),
        .display ( db_estado )
    );

    // Display da sequência atual
    hexa7seg HEX3 (
        .hexa    ( s_sequencia  ),
        .display ( db_sequencia )
    );

assign db_chavesIgualMemoria = s_igualE;
assign db_enderecoIgualSequencia = s_igualS;
assign db_fimS = s_fimS;
assign db_tem_jogada = s_tem_jogada;
assign db_clock = clock;
assign db_timeout = s_fim_timeout;
assign db_timeoutL = s_timeoutL;
endmodule

// --- End of jogo_desafio_memoria.v ---

// --- Start of comparador_85.v ---
/* -----------------------------------------------------------------
 *  Arquivo   : comparador_85.v
 *  Projeto   : Experiencia 2 - Um Fluxo de Dados Simples
 * -----------------------------------------------------------------
 * Descricao : comparador de magnitude de 4 bits 
 *             similar ao CI 7485
 *             baseado em descricao comportamental disponivel em	
 * https://web.eecs.umich.edu/~jhayes/iscas.restore/74L85b.v
 * -----------------------------------------------------------------
 * Revisoes  :
 *     Data        Versao  Autor             Descricao
 *     21/12/2023  1.0     Edson Midorikawa  criacao
 * -----------------------------------------------------------------
 */

module comparador_85 (ALBi, AGBi, AEBi, A, B, ALBo, AGBo, AEBo);

    input[3:0] A, B;
    input      ALBi, AGBi, AEBi;
    output     ALBo, AGBo, AEBo;
    wire[4:0]  CSL, CSG;

    assign CSL  = ~A + B + ALBi;
    assign ALBo = ~CSL[4];
    assign CSG  = A + ~B + AGBi;
    assign AGBo = ~CSG[4];
    assign AEBo = ((A == B) &amp;&amp; AEBi);

endmodule /* comparador_85 */
// --- End of comparador_85.v ---

// --- Start of contador_163.v ---
//------------------------------------------------------------------
// Arquivo   : contador_163.v
// Projeto   : Experiencia 2 - Um Fluxo de Dados Simples
//------------------------------------------------------------------
// Descricao : Contador binario de 4 bits, modulo 16
//             similar ao componente 74163
//
// baseado no componente Vrcntr4u.v do livro Digital Design Principles 
// and Practices, Fifth Edition, by John F. Wakerly              
//------------------------------------------------------------------
// Revisoes  :
//     Data        Versao  Autor             Descricao
//     14/12/2023  1.0     Edson Midorikawa  versao inicial
//------------------------------------------------------------------
//
module contador_163 ( clock, clr, ld, ent, enp, D, Q, rco );
    input clock, clr, ld, ent, enp;
    input [3:0] D;
    output reg [3:0] Q;
    output reg rco;

    always @ (posedge clock)
        if (~clr)               Q &lt;= 4&apos;d0;
        else if (~ld)           Q &lt;= D;
        else if (ent &amp;&amp; enp)    Q &lt;= Q + 1&apos;b1;
        else                    Q &lt;= Q;
 
    always @ (Q or ent)
        if (ent &amp;&amp; (Q == 4&apos;d15))   rco = 1;
        else                       rco = 0;
endmodule
// --- End of contador_163.v ---

// --- Start of contador_m.v ---

/*---------------Laboratorio Digital-------------------------------------
 * Arquivo   : contador_m.v
 * Projeto   : Experiencia 4 - Desenvolvimento de Projeto de 
 *                             Circuitos Digitais em FPGA
 *-----------------------------------------------------------------------
 * Descricao : contador binario, modulo m, com parametros 
 *             M (modulo do contador) e N (numero de bits),
 *             sinais para clear assincrono (zera_as) e sincrono (zera_s)
 *             e saidas de fim e meio de contagem
 *             
 *-----------------------------------------------------------------------
 * Revisoes  :
 *     Data        Versao  Autor             Descricao
 *     30/01/2024  1.0     Edson Midorikawa  criacao
 *     16/01/2025  1.1     Edson Midorikawa  revisao
 *-----------------------------------------------------------------------
 */

module contador_m #(parameter M=100, N=7)
  (
   input  wire          clock,
   input  wire          zera_as,
   input  wire          zera_s,
   input  wire          conta,
   output reg  [N-1:0]  Q,
   output reg           fim,
   output reg           meio
  );

  always @(posedge clock or posedge zera_as) begin
    if (zera_as) begin
      Q &lt;= 0;
    end else if (clock) begin
      if (zera_s) begin
        Q &lt;= 0;
      end else if (conta) begin
        if (Q == M-1) begin
          Q &lt;= 0;
        end else begin
          Q &lt;= Q + 1&apos;b1;
        end
      end
    end
  end

  // Saidas
  always @ (Q)
      if (Q == M-1)   fim = 1;
      else            fim = 0;

  always @ (Q)
      if (Q == M/2-1) meio = 1;
      else             meio = 0;

endmodule

// --- End of contador_m.v ---

// --- Start of edge_detector.v ---
/* ------------------------------------------------------------------------
 *  Arquivo   : edge_detector.v
 *  Projeto   : Experiencia 4 - Desenvolvimento de Projeto de
 *                              Circuitos Digitais com FPGA
 * ------------------------------------------------------------------------
 *  Descricao : detector de borda
 *              gera um pulso na saida de 1 periodo de clock
 *              a partir da detecao da borda de subida sa entrada
 *
 *              sinal de reset ativo em alto
 *
 *              &gt; codigo adaptado a partir de codigo VHDL disponivel em
 *                https://surf-vhdl.com/how-to-design-a-good-edge-detector/
 * ------------------------------------------------------------------------
 *  Revisoes  :
 *      Data        Versao  Autor             Descricao
 *      26/01/2024  1.0     Edson Midorikawa  versao inicial
 * ------------------------------------------------------------------------
 */

module edge_detector (
    input  clock,
    input  reset,
    input  sinal,
    output pulso
);

    reg reg0;
    reg reg1;

    always @(posedge clock or posedge reset) begin
        if (reset) begin
            reg0 &lt;= 1&apos;b0;
            reg1 &lt;= 1&apos;b0;
        end else if (clock) begin
            reg0 &lt;= sinal;
            reg1 &lt;= reg0;
        end
    end

    assign pulso = ~reg1 &amp; reg0;

endmodule

// --- End of edge_detector.v ---

// --- Start of exp6_fluxo_dados.v ---
//------------------------------------------------------------------
// Arquivo   : exp4_fluxo_dados.v
// Projeto   : Experiencia 6 - Jogo da Memória
//------------------------------------------------------------------
// Descricao : Fluxo de Dados da Experiência 6
//             
//------------------------------------------------------------------
// Revisoes  :
//     Data        Versao  Autor             Descricao
//     25/01/2025  1.0     Ana Vitória       versao inicial
//------------------------------------------------------------------
//

module exp6_fluxo_dados (
    input clock,
    input [3:0] botoes,
    input nivel,
    input zeraT,
    input zeraR,
    input registraR,
    input contaE,
    input contaS,
    input contaT,
    input zeraE,
    input zeraS,
    input controla_leds,
    input zeraT_leds,
    input contaT_leds,
    input fase_preview,
    input seletor_memoria,
    output igual,
    output enderecoIgualSequencia,
    output fimE,
    output fimS,
    output tem_jogada,
    output [3:0] db_contagem,
    output [3:0] db_jogadafeita,
    output [3:0] db_memoria,
    output controle_timeout,
    output [3:0] db_sequencia,
    output controle_timeout_led,
    output sequenciaMenorQueEndereco,
    output [3:0] leds,
    output db_seletor_memoria
);

    wire [3:0] s_endereco;
    wire [3:0] s_dado;
    wire [3:0] s_botoes;
    wire [3:0] s_sequencia;
    wire [3:0] s_sequencia_fixo;
    wire s_tem_jogada = |botoes;
    wire rco;
    wire [3:0] s_mux;
    wire [3:0] s_mem1;
    wire [3:0] s_mem2;

    // mux
    mux2x1 mux (
        .D0 (&amp;s_endereco[2:0]),
        .D1 (rco),
        .SEL (nivel),
        .OUT (fimE)
    );

    // mux n
    mux2x1_n #( .BITS(4) ) mux_leds (
      .D0(botoes),
      .D1(s_mux),
      .SEL(fase_preview),
      .OUT(leds)
    );

    // mux n
    mux2x1_n #( .BITS(4) ) mux_zera (
      .D0(4&apos;b0000),
      .D1(s_dado),
      .SEL(controla_leds),
      .OUT(s_mux)
    );

    // contador endereços
    contador_163 contEnd (
        .clock (clock),
        .clr   (~zeraE),
        .ld    (1&apos;b1),
        .ent   (1&apos;b1),
        .enp   (contaE),
        .D     (4&apos;b0),
        .Q     (s_endereco),
        .rco   (rco)
    );

    // contador sequencias
    contador_163 contLmt (
        .clock (clock),
        .clr   (~zeraS),
        .ld    (1&apos;b1),
        .ent   (1&apos;b1),
        .enp   (contaS),
        .D     (4&apos;b0),
        .Q     (s_sequencia),
        .rco   (fimS)
    );

    // comparador jogadas
    comparador_85 compJog (
        .A    (s_dado),
        .B    (s_botoes),
        .ALBi (1&apos;b0),
        .AGBi (1&apos;b0),
        .AEBi (1&apos;b1),
        .ALBo (),
        .AGBo (),
        .AEBo (igual)
    );

    // comparador sequencias
    comparador_85 compLmt (
        .A    (s_sequencia),
        .B    (s_endereco),
        .ALBi (1&apos;b0),
        .AGBi (1&apos;b0),
        .AEBi (1&apos;b1),
        .ALBo (sequenciaMenorQueEndereco),
        .AGBo (),
        .AEBo (enderecoIgualSequencia)
    );

    mux2x1_n #( .BITS(4) ) mux_jogo (
      .D0(s_mem1),
      .D1(s_mem2),
      .SEL(seletor_memoria),
      .OUT(s_dado)
    );

    // memória 1
    sync_rom_16x4 #(.ROM_FILE(&quot;jogo_1.mem&quot;)) memoria1 (
        .clock    (clock),
        .address  (s_endereco),
        .data_out (s_mem1)
    );

    // memória 2
    sync_rom_16x4 #(.ROM_FILE(&quot;jogo_2.mem&quot;)) memoria2 (
        .clock    (clock),
        .address  (s_endereco),
        .data_out (s_mem2)
    );

    // registrador
    registrador_4 regBotoes (
        .clock  (clock),
        .clear  (zeraR),
        .enable (registraR),
        .D      (botoes),
        .Q      (s_botoes)
    );

    edge_detector detector (
        .clock (clock),
        .reset (zeraS),
        .sinal (s_tem_jogada),
        .pulso (tem_jogada)
    );

    contador_m #(.M(5000), .N(13)) contador_timeout_jogadas (
        .clock   (clock),
        .zera_as (zeraC || zeraR),
        .zera_s  (zeraT),
        .conta   (contaT),
        .Q       (),
        .fim     (controle_timeout),
        .meio    ()
    );

    contador_m #(.M(500), .N(9)) contador_timeout_leds (
        .clock   (clock),
        .zera_as (zeraC || zeraR),
        .zera_s  (zeraT_leds),
        .conta   (contaT_leds),
        .Q       (),
        .fim     (controle_timeout_led),
        .meio    ()
    );

    assign db_memoria  = s_dado;
    assign db_contagem = s_endereco;
    assign db_sequencia = s_sequencia;
    assign db_jogadafeita = s_botoes;
    assign db_seletor_memoria = seletor_memoria;
endmodule

// --- End of exp6_fluxo_dados.v ---

// --- Start of exp6_unidade_controle.v ---
//------------------------------------------------------------------
// Arquivo   : exp6_unidade_controle.v
// Projeto   : Experiencia 6 - Jogo da Memória
//------------------------------------------------------------------
// Descricao : Unidade de controle
//         
//------------------------------------------------------------------
// Revisoes  :
//     Data        Versao  Autor                        Descricao
//     14/01/2024  1.0     Edson Midorikawa             versao inicial
//     12/01/2025  1.1     Edson Midorikawa             revisao
//     24/01/2025  1.2     Ana Murad, Heitor Gama       exercício
//------------------------------------------------------------------
//
module exp6_unidade_controle (
    input clock,
    input reset,
    input jogar,
    input nivel,
    input fimE,
    input igualE,
    input igualS,
    input tem_jogada,
    input timeout,
    input timeoutL,
    input menorS,
    output reg zeraE,
    output reg contaE,
    output reg zeraS,
    output reg contaS,
    output reg zeraR,
    output reg registraR,
    output reg ganhou,
    output reg perdeu,
    output reg pronto,
    output reg [3:0] db_estado,
    output reg deu_timeout,
    output reg contaT,
    output reg nivel_uc,
    output reg zeraT,
    output reg controla_leds,
    output reg zeraT_leds,
    output reg contaT_leds,
    output reg fase_preview
);

    // Define estados
    parameter inicial        = 4&apos;b0000;  // 0
    parameter preparacao     = 4&apos;b0001;  // 1
    parameter nova_seq       = 4&apos;b0010;  // 2
    parameter mostra_leds    = 4&apos;b1011;  // B
    parameter mostrou_led    = 4&apos;b1100;  // C
    parameter espera_led     = 4&apos;b0111;  // 7
    parameter zera_timeout   = 4&apos;b1000;  // 8
    parameter comecar_rodada = 4&apos;b1101;  // D
    parameter espera         = 4&apos;b0011;  // 3
    parameter registra       = 4&apos;b0100;  // 4
    parameter comparacao     = 4&apos;b0101;  // 5
    parameter proximo        = 4&apos;b0110;  // 6
    parameter fim_erro       = 4&apos;b1110;  // E
    parameter fim_acerto     = 4&apos;b1010;  // A
    parameter fim_timeout    = 4&apos;b1111;  // F

    // Variaveis de estado
    reg [3:0] Eatual, Eprox;

    reg [14*8-1:0] Eatual_str;
    always@(Eatual) begin
        case(Eatual)
            inicial:        Eatual_str = &quot;inicial&quot;;
            preparacao:     Eatual_str = &quot;preparacao&quot;;
            nova_seq:       Eatual_str = &quot;nova_seq&quot;;
            mostra_leds:    Eatual_str = &quot;mostra_leds&quot;;
            mostrou_led:    Eatual_str = &quot;mostrou_leds&quot;;
            espera_led:     Eatual_str = &quot;espera_leds&quot;;
            zera_timeout:   Eatual_str = &quot;zera_timeout&quot;;
            comecar_rodada: Eatual_str = &quot;comecar_rodada&quot;;
            espera:         Eatual_str = &quot;espera&quot;;
            registra:       Eatual_str = &quot;registra&quot;;
            comparacao:     Eatual_str = &quot;comparacao&quot;;
            proximo:        Eatual_str = &quot;proximo&quot;;
            fim_acerto:     Eatual_str = &quot;fim_acerto&quot;;
            fim_erro:       Eatual_str = &quot;fim_erro&quot;;
            fim_timeout:    Eatual_str = &quot;fim_timeout&quot;;
            default:        Eatual_str = &quot;UNKNOWN&quot;;
        endcase
    end

    // Memoria de estado
    always @(posedge clock or posedge reset) begin
        if (reset)
            Eatual &lt;= inicial;
        else
            Eatual &lt;= Eprox;
    end

    // Logica de proximo estado
    always @* begin
        case (Eatual)
            inicial:        Eprox = jogar ? preparacao : inicial;
            preparacao:     Eprox = mostra_leds;
            nova_seq:       Eprox = espera_led;
            mostra_leds:    Eprox = timeoutL ? (fimE ? comecar_rodada : mostrou_led) : mostra_leds;
            mostrou_led:    Eprox = espera_led;
            espera_led:     Eprox = menorS ? comecar_rodada : (timeoutL ? zera_timeout : espera_led);
            zera_timeout:   Eprox = mostra_leds;
            comecar_rodada: Eprox = espera;
            espera:         Eprox = timeout ? fim_timeout : (tem_jogada ? registra : espera);
            registra:       Eprox = comparacao;
            comparacao:     Eprox = igualE ? (fimE ? fim_acerto : (igualS ? nova_seq : proximo)) : fim_erro;
            proximo:        Eprox = espera;
            fim_acerto:     Eprox = jogar ? preparacao : fim_acerto;
            fim_erro:       Eprox = jogar ? preparacao : fim_erro;
            fim_timeout:    Eprox = jogar ? preparacao : fim_timeout;
            default:        Eprox = inicial;
        endcase
    end

    // Logica de saida (maquina Moore)
    always @* begin
        zeraE         = (Eatual == inicial || Eatual == preparacao || Eatual == nova_seq || Eatual == comecar_rodada) ? 1&apos;b1 : 1&apos;b0;
        zeraR         = (Eatual == inicial) ? 1&apos;b1 : 1&apos;b0;
        registraR     = (Eatual == registra) ? 1&apos;b1 : 1&apos;b0;
        contaE        = (Eatual == proximo || Eatual == mostrou_led) ? 1&apos;b1 : 1&apos;b0;
        pronto        = (Eatual == fim_acerto || Eatual == fim_erro || Eatual == fim_timeout) ? 1&apos;b1 : 1&apos;b0;
        ganhou        = (Eatual == fim_acerto) ? 1&apos;b1 : 1&apos;b0;
        perdeu        = (Eatual == fim_erro || Eatual == fim_timeout) ? 1&apos;b1 : 1&apos;b0;
        deu_timeout   = (Eatual == fim_timeout) ? 1&apos;b1 : 1&apos;b0;
        contaT        = (Eatual == espera) ? 1&apos;b1: 1&apos;b0;
        zeraS         = (Eatual == preparacao) ? 1&apos;b1 : 1&apos;b0;
        contaS        = (Eatual == nova_seq) ? 1&apos;b1 : 1&apos;b0;
        nivel_uc      = (Eatual == preparacao) ? nivel : nivel_uc;
		zeraT         = (Eatual == proximo || Eatual == nova_seq) ? 1&apos;b1 : 1&apos;b0;
        controla_leds = (Eatual == mostra_leds) ? 1&apos;b1 : 1&apos;b0;
        zeraT_leds    = (Eatual == mostrou_led || Eatual == comecar_rodada || Eatual == zera_timeout) ? 1&apos;b1 : 1&apos;b0;
        contaT_leds   = (Eatual == mostra_leds || Eatual == espera_led) ? 1&apos;b1 : 1&apos;b0;
        fase_preview  = (Eatual == mostra_leds || Eatual == mostrou_led || Eatual == zera_timeout || Eatual == comecar_rodada) ? 1&apos;b1 : 1&apos;b0;

        // Saida de depuracao (estado)
        case (Eatual)
            inicial:        db_estado = 4&apos;b0000;  // 0
            preparacao:     db_estado = 4&apos;b0001;  // 1
            nova_seq:       db_estado = 4&apos;b0010;  // 2
            mostra_leds:    db_estado = 4&apos;b1011;  // B
            mostrou_led:    db_estado = 4&apos;b1100;  // C
            espera_led:     db_estado = 4&apos;b0111;  // 7
            zera_timeout:   db_estado = 4&apos;b1000;  // 8
            comecar_rodada: db_estado = 4&apos;b1101;  // D
            espera:         db_estado = 4&apos;b0011;  // 3
            registra:       db_estado = 4&apos;b0100;  // 4
            comparacao:     db_estado = 4&apos;b0101;  // 5
            proximo:        db_estado = 4&apos;b0110;  // 6
            fim_acerto:     db_estado = 4&apos;b1010;  // A
            fim_erro:       db_estado = 4&apos;b1110;  // E
            fim_timeout:    db_estado = 4&apos;b1111;  // F (deu ruim)
            default:        db_estado = 4&apos;b1001;  // 9
        endcase
    end
endmodule
// --- End of exp6_unidade_controle.v ---

// --- Start of hexa7seg.v ---
/* ----------------------------------------------------------------
 * Arquivo   : hexa7seg.v
 * Projeto   : Experiencia 2 - Um Fluxo de Dados Simples
 *--------------------------------------------------------------
 * Descricao : decodificador hexadecimal para 
 *             display de 7 segmentos 
 * 
 * entrada : hexa - codigo binario de 4 bits hexadecimal
 * saida   : sseg - codigo de 7 bits para display de 7 segmentos
 *
 * baseado no componente bcd7seg.v da Intel FPGA
 *--------------------------------------------------------------
 * dica de uso: mapeamento para displays da placa DE0-CV
 *              bit 6 mais significativo é o bit a esquerda
 *              p.ex. sseg(6) -&gt; HEX0[6] ou HEX06
 *--------------------------------------------------------------
 * Revisoes  :
 *     Data        Versao  Autor             Descricao
 *     24/12/2023  1.0     Edson Midorikawa  criacao
 *--------------------------------------------------------------
 */

module hexa7seg (hexa, display);
    input      [3:0] hexa;
    output reg [6:0] display;

    /*
     *    ---
     *   | 0 |
     * 5 |   | 1
     *   |   |
     *    ---
     *   | 6 |
     * 4 |   | 2
     *   |   |
     *    ---
     *     3
     */
        
    always @(hexa)
    case (hexa)
        4&apos;h0:    display = 7&apos;b1000000;
        4&apos;h1:    display = 7&apos;b1111001;
        4&apos;h2:    display = 7&apos;b0100100;
        4&apos;h3:    display = 7&apos;b0110000;
        4&apos;h4:    display = 7&apos;b0011001;
        4&apos;h5:    display = 7&apos;b0010010;
        4&apos;h6:    display = 7&apos;b0000010;
        4&apos;h7:    display = 7&apos;b1111000;
        4&apos;h8:    display = 7&apos;b0000000;
        4&apos;h9:    display = 7&apos;b0010000;
        4&apos;ha:    display = 7&apos;b0001000;
        4&apos;hb:    display = 7&apos;b0000011;
        4&apos;hc:    display = 7&apos;b1000110;
        4&apos;hd:    display = 7&apos;b0100001;
        4&apos;he:    display = 7&apos;b0000110;
        4&apos;hf:    display = 7&apos;b0001110;
        default: display = 7&apos;b1111111;
    endcase
endmodule

// --- End of hexa7seg.v ---

// --- Start of jogo_desafio_memoria_tb1.v ---
`timescale 1us/1ns

module jogo_desafio_memoria_tb1;

    // Sinais para conectar com o DUT
    reg        clock_in   = 1;
    reg        reset_in   = 0;
    reg        jogar_in = 0;
    reg  [3:0] botoes_in  = 4&apos;b0000;

    wire       ganhou_out;
    wire       perdeu_out;
    wire       pronto_out;
    wire [3:0] leds_out;
    wire       db_clock_out;
    wire       db_tem_jogada_out;
    wire       db_chavesIgualMemoria_out;
    wire       db_enderecoIgualSequencia_out;
    wire       db_fimS_out;
    wire [6:0] db_contagem_out;
    wire [6:0] db_memoria_out;
    wire [6:0] db_jogadafeita_out;
    wire [6:0] db_sequencia_out;
    wire [6:0] db_estado_out;
    wire       db_timeout_out;
    wire       db_timeoutL_out;

    // Configuração do clock
    parameter clockPeriod = 1000; // in us, f=1KHz

    // Identificação do caso de teste
    reg [31:0] caso = 0;

    // Gerador de clock
    always #((clockPeriod / 2)) clock_in = ~clock_in;

    // Instanciação do DUT
    jogo_desafio_memoria dut (
        .clock(clock_in),
        .reset(reset_in),
        .jogar(jogar_in),
        .botoes(botoes_in),
        .ganhou(ganhou_out),
        .perdeu(perdeu_out),
        .timeout(timeout_out),
        .pronto(pronto_out),
        .leds(leds_out),
        .db_clock(db_clock_out),
        .db_tem_jogada(db_tem_jogada_out),
        .db_chavesIgualMemoria(db_chavesIgualMemoria_out),
        .db_enderecoIgualSequencia(db_enderecoIgualSequencia_out),
        .db_fimS(db_fimS_out),
        .db_contagem(db_contagem_out),
        .db_memoria(db_memoria_out),
        .db_jogadafeita(db_jogadafeita_out),
        .db_sequencia(db_sequencia_out),
        .db_estado(db_estado_out),
        .db_timeout(db_timeout_out),
        .db_timeoutL(db_timeoutL_out)
    );

    // Gabarito
    reg [3:0] jogadas[0:15];
    initial begin
        jogadas[0] = 4&apos;b0001;
        jogadas[1] = 4&apos;b0010;
        jogadas[2] = 4&apos;b0100;
        jogadas[3] = 4&apos;b1000;
        jogadas[4] = 4&apos;b0100;
        jogadas[5] = 4&apos;b0010;
        jogadas[6] = 4&apos;b0001;
        jogadas[7] = 4&apos;b0001;
        jogadas[8] = 4&apos;b0010;
        jogadas[9] = 4&apos;b0010;
        jogadas[10] = 4&apos;b0100;
        jogadas[11] = 4&apos;b0100;
        jogadas[12] = 4&apos;b1000;
        jogadas[13] = 4&apos;b1000;
        jogadas[14] = 4&apos;b0001;
        jogadas[15] = 4&apos;b0100;
    end

    // Variáveis de loop
    integer i, j;

    // Geração dos estímulos de entrada
    initial begin
        $display(&quot;Inicio da simulacao&quot;);

        // Condições iniciais
        caso = 0;
        clock_in = 1;
        reset_in = 0;
        jogar_in = 0;
        botoes_in = 4&apos;b0000;
        #(clockPeriod);

        // Teste 1: Reset do circuito
        caso = 1;
        @(negedge clock_in);
        reset_in = 1;
        #(clockPeriod);
        reset_in = 0;
        #(10 * clockPeriod);

        // Teste 2: Jogar por 5 períodos de clock
        caso = 2;
        #(2 * clockPeriod);
        jogar_in = 1;
        #(5 * clockPeriod);
        jogar_in = 0;
        #(10 * clockPeriod);

        // Testes de jogadas
        for (i = 3; i &lt;= 18; i = i + 1) begin
            #(1_000_000 * (i - 2));
            #(500_000);
            caso = i;
            @(negedge clock_in);

            for (j = 0; j &lt; i-2; j = j + 1) begin
                botoes_in = jogadas[j];
                #(10 * clockPeriod);
                botoes_in = 4&apos;b0000;
                #(10 * clockPeriod);
            end
        end

        // Final da simulação
        caso = 99;
        #1;
        $display(&quot;Fim da simulacao&quot;);
        $stop;
    end
endmodule

// --- End of jogo_desafio_memoria_tb1.v ---

// --- Start of jogo_desafio_memoria_tb2.v ---
`timescale 1us/1ns

module jogo_desafio_memoria_tb2;

    // Sinais para conectar com o DUT
    reg        clock_in   = 1;
    reg        reset_in   = 0;
    reg        jogar_in = 0;
    reg  [3:0] botoes_in  = 4&apos;b0000;

    wire       ganhou_out;
    wire       perdeu_out;
    wire       pronto_out;
    wire [3:0] leds_out;
    wire       db_clock_out;
    wire       db_tem_jogada_out;
    wire       db_chavesIgualMemoria_out;
    wire       db_enderecoIgualSequencia_out;
    wire       db_fimS_out;
    wire [6:0] db_contagem_out;
    wire [6:0] db_memoria_out;
    wire [6:0] db_jogadafeita_out;
    wire [6:0] db_sequencia_out;
    wire [6:0] db_estado_out;
    wire       db_timeout_out;
    wire       db_timeoutL_out;

    // Configuração do clock
    parameter clockPeriod = 1000; // in us, f=1KHz

    // Identificação do caso de teste
    reg [31:0] caso = 0;

    // Gerador de clock
    always #((clockPeriod / 2)) clock_in = ~clock_in;

    // Instanciação do DUT
    jogo_desafio_memoria dut (
        .clock(clock_in),
        .reset(reset_in),
        .jogar(jogar_in),
        .botoes(botoes_in),
        .ganhou(ganhou_out),
        .perdeu(perdeu_out),
        .timeout(timeout_out),
        .pronto(pronto_out),
        .leds(leds_out),
        .db_clock(db_clock_out),
        .db_tem_jogada(db_tem_jogada_out),
        .db_chavesIgualMemoria(db_chavesIgualMemoria_out),
        .db_enderecoIgualSequencia(db_enderecoIgualSequencia_out),
        .db_fimS(db_fimS_out),
        .db_contagem(db_contagem_out),
        .db_memoria(db_memoria_out),
        .db_jogadafeita(db_jogadafeita_out),
        .db_sequencia(db_sequencia_out),
        .db_estado(db_estado_out),
        .db_timeout(db_timeout_out),
        .db_timeoutL(db_timeoutL_out)
    );

    // Gabarito errado
    reg [3:0] jogadas[0:15];
    initial begin
        jogadas[0] = 4&apos;b0001;
        jogadas[1] = 4&apos;b0010;
        jogadas[2] = 4&apos;b0100;
        jogadas[3] = 4&apos;b1000;
        jogadas[4] = 4&apos;b0100;
        jogadas[5] = 4&apos;b0010;
        jogadas[6] = 4&apos;b0001;
        jogadas[7] = 4&apos;b0001;
        jogadas[8] = 4&apos;b0010;
        jogadas[9] = 4&apos;b0010;
        jogadas[10] = 4&apos;b0100;
        jogadas[11] = 4&apos;b0100;
        jogadas[12] = 4&apos;b1000;
        jogadas[13] = 4&apos;b1000;
        jogadas[14] = 4&apos;b0001;
        jogadas[15] = 4&apos;b0100;
    end

    // Variáveis de loop
    integer i, j;

    // Geração dos estímulos de entrada
    initial begin
        $display(&quot;Inicio da simulacao&quot;);

        // Condições iniciais
        caso = 0;
        clock_in = 1;
        reset_in = 0;
        jogar_in = 0;
        botoes_in = 4&apos;b0000;
        #(clockPeriod);

        // Teste 1: Reset do circuito
        caso = 1;
        @(negedge clock_in);
        reset_in = 1;
        #(clockPeriod);
        reset_in = 0;
        #(10 * clockPeriod);

        // Teste 2: Jogar por 5 períodos de clock
        caso = 2;
        #(2 * clockPeriod);
        jogar_in = 1;
        #(5 * clockPeriod);
        jogar_in = 0;
        #(10 * clockPeriod);

        // Testes de jogadas
        for (i = 3; i &lt;= 6; i = i + 1) begin
            #(1_000_000 * (i - 2));
            #(500_000);
            caso = i;
            @(negedge clock_in);

            for (j = 0; j &lt; i-2; j = j + 1) begin
                if (i == 6 &amp;&amp;  j == 2) begin
                    botoes_in = 4&apos;b0010;
                    j = i - 2;
                end
                else begin
                    botoes_in = jogadas[j];
                end
                #(10 * clockPeriod);
                botoes_in = 4&apos;b0000;
                #(10 * clockPeriod);
            end
        end

        // Teste 7: Acionar o sinal jogar
        caso = 7;
        #(2 * clockPeriod);
        jogar_in = 1;
        #(5 * clockPeriod);
        jogar_in = 0;
        #(10 * clockPeriod);

        // Testes de jogadas
        for (i = 8; i &lt;= 9; i = i + 1) begin
            #(1_000_000 * (i - 7));
            #(500_000);
            caso = i;
            @(negedge clock_in);

            for (j = 0; j &lt; i-7; j = j + 1) begin
                if (i == 9 &amp;&amp;  j == 1) begin
                    botoes_in = 4&apos;b0100;
                    j = i - 7;
                end
                else begin
                    botoes_in = jogadas[j];
                end
                #(10 * clockPeriod);
                botoes_in = 4&apos;b0000;
                #(10 * clockPeriod);
            end
        end

        // Final da simulação
        caso = 99;
        #1;
        $display(&quot;Fim da simulacao&quot;);
        $stop;
    end
endmodule

// --- End of jogo_desafio_memoria_tb2.v ---

// --- Start of jogo_desafio_memoria_tb3.v ---
`timescale 1us/1ns

module jogo_desafio_memoria_tb3;

    // Sinais para conectar com o DUT
    reg        clock_in   = 1;
    reg        reset_in   = 0;
    reg        jogar_in = 0;
    reg  [3:0] botoes_in  = 4&apos;b0000;

    wire       ganhou_out;
    wire       perdeu_out;
    wire       pronto_out;
    wire [3:0] leds_out;
    wire       db_clock_out;
    wire       db_tem_jogada_out;
    wire       db_chavesIgualMemoria_out;
    wire       db_enderecoIgualSequencia_out;
    wire       db_fimS_out;
    wire [6:0] db_contagem_out;
    wire [6:0] db_memoria_out;
    wire [6:0] db_jogadafeita_out;
    wire [6:0] db_sequencia_out;
    wire [6:0] db_estado_out;
    wire       db_timeout_out;
    wire       db_timeoutL_out;

    // Configuração do clock
    parameter clockPeriod = 1000; // in us, f=1KHz

    // Identificação do caso de teste
    reg [31:0] caso = 0;

    // Gerador de clock
    always #((clockPeriod / 2)) clock_in = ~clock_in;

    // Instanciação do DUT
    jogo_desafio_memoria dut (
        .clock(clock_in),
        .reset(reset_in),
        .jogar(jogar_in),
        .botoes(botoes_in),
        .ganhou(ganhou_out),
        .perdeu(perdeu_out),
        .timeout(timeout_out),
        .pronto(pronto_out),
        .leds(leds_out),
        .db_clock(db_clock_out),
        .db_tem_jogada(db_tem_jogada_out),
        .db_chavesIgualMemoria(db_chavesIgualMemoria_out),
        .db_enderecoIgualSequencia(db_enderecoIgualSequencia_out),
        .db_fimS(db_fimS_out),
        .db_contagem(db_contagem_out),
        .db_memoria(db_memoria_out),
        .db_jogadafeita(db_jogadafeita_out),
        .db_sequencia(db_sequencia_out),
        .db_estado(db_estado_out),
        .db_timeout(db_timeout_out),
        .db_timeoutL(db_timeoutL_out)
    );

    // Geração dos estímulos de entrada
    initial begin
        $display(&quot;Inicio da simulacao&quot;);

        // Condições iniciais
        caso = 0;
        clock_in = 1;
        reset_in = 0;
        jogar_in = 0;
        botoes_in = 4&apos;b0000;
        #(clockPeriod);

        // Teste 1: Reset do circuito
        caso = 1;
        @(negedge clock_in);
        reset_in = 1;
        #(clockPeriod);
        reset_in = 0;
        #(10 * clockPeriod);

        // Teste 2: Jogar por 5 períodos de clock
        caso = 2;
        #(2 * clockPeriod);
        jogar_in = 1;
        #(5 * clockPeriod);
        jogar_in = 0;
        #(10 * clockPeriod);

        // Jogar a primeira rodada
        #(1_000_000);
        #(500_000);
        botoes_in = 4&apos;b0001;
        #(10 * clockPeriod);
        botoes_in = 4&apos;b0000;
        #(10 * clockPeriod);

        // Jogar a segunda rodada e aguardar mais de 5s
        #(2_000_000);
        #(500_000);
        botoes_in = 4&apos;b0001;
        #(10 * clockPeriod);
        botoes_in = 4&apos;b0000;
        #(10 * clockPeriod);
        botoes_in = 4&apos;b0010;
        #(10 * clockPeriod);
        botoes_in = 4&apos;b0000;
        #(10 * clockPeriod);

        // Testes de jogadas
        #(8_000_000);
        #(500_000);

        // Final da simulação
        caso = 99;
        #1;
        $display(&quot;Fim da simulacao&quot;);
        $stop;
    end
endmodule

// --- End of jogo_desafio_memoria_tb3.v ---

// --- Start of mux2x1.v ---
/*------------------------------------------------------------------------
 * Arquivo   : mux2x1.v
 * Projeto   : Jogo do Desafio da Memoria
 *------------------------------------------------------------------------
 * Descricao : multiplexador 2x1
 * 
 * adaptado a partir do codigo my_4t1_mux.vhd do livro &quot;Free Range VHDL&quot;
 * 
 * exemplo de uso: ver testbench mux2x1_tb.v
 *------------------------------------------------------------------------
 * Revisoes  :
 *     Data        Versao  Autor             Descricao
 *     15/02/2024  1.0     Edson Midorikawa  criacao
 *     31/01/2025  1.1     Edson Midorikawa  revisao
 *------------------------------------------------------------------------
 */

module mux2x1 (
    input      D0,
    input      D1,
    input      SEL,
    output reg OUT
);

always @(*) begin
    case (SEL)
        1&apos;b0:    OUT = D0;
        1&apos;b1:    OUT = D1;
        default: OUT = 0; // saida em 0
    endcase
end

endmodule

// --- End of mux2x1.v ---

// --- Start of mux2x1_n.v ---
/*------------------------------------------------------------------------
 * Arquivo   : mux2x1_n.v
 * Projeto   : Jogo do Desafio da Memoria
 *------------------------------------------------------------------------
 * Descricao : multiplexador 2x1 com entradas de n bits (parametrizado) 
 * 
 * adaptado a partir do codigo my_4t1_mux.vhd do livro &quot;Free Range VHDL&quot;
 * 
 * exemplo de uso: ver testbench mux2x1_n_tb.v
 *------------------------------------------------------------------------
 * Revisoes  :
 *     Data        Versao  Autor             Descricao
 *     15/02/2024  1.0     Edson Midorikawa  criacao
 *------------------------------------------------------------------------
 */

module mux2x1_n #(
    parameter BITS = 4
) (
    input      [BITS-1:0] D0,
    input      [BITS-1:0] D1,
    input                 SEL,
    output reg [BITS-1:0] OUT
);

always @(*) begin
    case (SEL)
        1&apos;b0:    OUT = D0;
        1&apos;b1:    OUT = D1;
        default: OUT = {BITS{1&apos;b1}}; // todos os bits em 1
    endcase
end

endmodule
// --- End of mux2x1_n.v ---

// --- Start of mux2x1_tb.v ---
/*------------------------------------------------------------------------
 * Arquivo   : mux2x1_tb.v
 * Projeto   : Jogo do Desafio da Memoria
 *------------------------------------------------------------------------
 * Descricao : testbench para o multiplexador 2x1 
 * 
 *------------------------------------------------------------------------
 * Revisoes  :
 *     Data        Versao  Autor             Descricao
 *     15/02/2024  1.0     Edson Midorikawa  criacao
 *     31/01/2025  1.1     Edson Midorikawa  revisao
 *------------------------------------------------------------------------
 */
 
`timescale 1ns/1ns

module mux2x1_tb;
    
    // Entradas
    reg D0, D1;
    reg SEL;
    
    // Saída
    wire OUT;
    
    // Instanciacao do DUT
    mux2x1 mux_inst (
        .D0  ( D0  ),
        .D1  ( D1  ),
        .SEL ( SEL ),
        .OUT ( OUT )
    );
    
    // Geracao de Estimulos
    initial begin
        $monitor(&quot;Time=%0t D0=%b D1=%b SEL=%b MUX_OUT=%b&quot;, $time, D0, D1, SEL, OUT);
        
        // Caso de teste 1: SEL = 0
        SEL = 0;
        D0 = 1&apos;b0; D1 = 1&apos;b1;
        #10;

        // Caso de teste 2: SEL = 0
        SEL = 0;
        D0 = 1&apos;b1; D1 = 1&apos;b0;
        #10;
 
        // Caso de teste 3: SEL = 1
        SEL = 1;
        D0 = 1&apos;b0; D1 = 1&apos;b1;
        #10;
 
        // Caso de teste 4: SEL = 1
        SEL = 1;
        D0 = 1&apos;b1; D1 = 1&apos;b0;
        #10;
        
        // Caso de teste 5: SEL = X
        SEL = 1&apos;bx;
        D0 = 1&apos;b0; D1 = 1&apos;b0;
        #10;
        
        // Caso de teste 6: SEL = X
        SEL = 1&apos;bx;
        D0 = 1&apos;b1; D1 = 1&apos;b0;
        #10;
        
        // Fim da simulacao
        $stop;
    end
    
endmodule

// --- End of mux2x1_tb.v ---

// --- Start of registrador_4.v ---
//------------------------------------------------------------------
// Arquivo   : registrador_4.v
// Projeto   : Experiencia 3 - Projeto de uma Unidade de Controle 
//------------------------------------------------------------------
// Descricao : Registrador de 4 bits
//             
//------------------------------------------------------------------
// Revisoes  :
//     Data        Versao  Autor             Descricao
//     14/12/2023  1.0     Edson Midorikawa  versao inicial
//------------------------------------------------------------------
//
module registrador_4 (
    input        clock,
    input        clear,
    input        enable,
    input  [3:0] D,
    output [3:0] Q
);

    reg [3:0] IQ;

    always @(posedge clock or posedge clear) begin
        if (clear)
            IQ &lt;= 0;
        else if (enable)
            IQ &lt;= D;
    end

    assign Q = IQ;

endmodule
// --- End of registrador_4.v ---

// --- Start of sync_rom_16x4.v ---
//------------------------------------------------------------------
// Arquivo   : sync_rom_16x4.v
// Projeto   : Experiencia 3 - Projeto de uma Unidade de Controle 
//------------------------------------------------------------------
// Descricao : ROM sincrona 16x4 (conteúdo pre-programado)
//             
//------------------------------------------------------------------
// Revisoes  :
//     Data        Versao  Autor             Descricao
//     14/12/2023  1.0     Edson Midorikawa  versao inicial
//------------------------------------------------------------------
//

module sync_rom_16x4 #(parameter ROM_FILE = &quot;jogo_1.mem&quot;) (
    input            clock,
    input      [3:0] address,
    output reg [3:0] data_out
);

    reg [3:0] rom [15:0];  // Declaração da ROM como um array de registradores

    initial begin
        $readmemb(ROM_FILE, rom); // Lê os dados do arquivo binário
        // Para arquivo hexadecimal, use: $readmemh(ROM_FILE, rom);
    end

    always @ (posedge clock) begin
        data_out &lt;= rom[address];  // Atribui o valor da ROM com base no endereço
    end

endmodule


// --- End of sync_rom_16x4.v ---</string>
        </entry>
      </elementAttributes>
      <pos x="740" y="-520"/>
    </visualElement>
    <visualElement>
      <elementName>Seven-Seg</elementName>
      <elementAttributes/>
      <pos x="1800" y="-840"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>Input Splitting</string>
          <string>8</string>
        </entry>
        <entry>
          <string>Output Splitting</string>
          <string>1*8</string>
        </entry>
      </elementAttributes>
      <pos x="1680" y="-600"/>
    </visualElement>
    <visualElement>
      <elementName>Ground</elementName>
      <elementAttributes/>
      <pos x="1280" y="-580"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>Input Splitting</string>
          <string>7,1</string>
        </entry>
      </elementAttributes>
      <pos x="1340" y="-600"/>
    </visualElement>
    <visualElement>
      <elementName>Not</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>8</int>
        </entry>
      </elementAttributes>
      <pos x="1500" y="-600"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>small</string>
          <boolean>true</boolean>
        </entry>
        <entry>
          <string>addValueToGraph</string>
          <boolean>false</boolean>
        </entry>
        <entry>
          <string>Label</string>
          <string>SEQUENCIA</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>7</int>
        </entry>
      </elementAttributes>
      <pos x="2160" y="-220"/>
    </visualElement>
    <visualElement>
      <elementName>Seven-Seg</elementName>
      <elementAttributes/>
      <pos x="2440" y="-420"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>Input Splitting</string>
          <string>8</string>
        </entry>
        <entry>
          <string>Output Splitting</string>
          <string>1*8</string>
        </entry>
      </elementAttributes>
      <pos x="2320" y="-180"/>
    </visualElement>
    <visualElement>
      <elementName>Ground</elementName>
      <elementAttributes/>
      <pos x="2020" y="-160"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>Input Splitting</string>
          <string>7,1</string>
        </entry>
      </elementAttributes>
      <pos x="2080" y="-180"/>
    </visualElement>
    <visualElement>
      <elementName>Not</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>8</int>
        </entry>
      </elementAttributes>
      <pos x="2180" y="-180"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>small</string>
          <boolean>true</boolean>
        </entry>
        <entry>
          <string>addValueToGraph</string>
          <boolean>false</boolean>
        </entry>
        <entry>
          <string>Label</string>
          <string>ESTADO</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>7</int>
        </entry>
      </elementAttributes>
      <pos x="2180" y="160"/>
    </visualElement>
    <visualElement>
      <elementName>Seven-Seg</elementName>
      <elementAttributes/>
      <pos x="2460" y="-40"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>Input Splitting</string>
          <string>8</string>
        </entry>
        <entry>
          <string>Output Splitting</string>
          <string>1*8</string>
        </entry>
      </elementAttributes>
      <pos x="2340" y="200"/>
    </visualElement>
    <visualElement>
      <elementName>Ground</elementName>
      <elementAttributes/>
      <pos x="2040" y="220"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>Input Splitting</string>
          <string>7,1</string>
        </entry>
      </elementAttributes>
      <pos x="2100" y="200"/>
    </visualElement>
    <visualElement>
      <elementName>Not</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>8</int>
        </entry>
      </elementAttributes>
      <pos x="2200" y="200"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>small</string>
          <boolean>true</boolean>
        </entry>
        <entry>
          <string>addValueToGraph</string>
          <boolean>false</boolean>
        </entry>
        <entry>
          <string>Label</string>
          <string>MEMORIA</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>7</int>
        </entry>
      </elementAttributes>
      <pos x="2160" y="-620"/>
    </visualElement>
    <visualElement>
      <elementName>Seven-Seg</elementName>
      <elementAttributes/>
      <pos x="2440" y="-820"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>Input Splitting</string>
          <string>8</string>
        </entry>
        <entry>
          <string>Output Splitting</string>
          <string>1*8</string>
        </entry>
      </elementAttributes>
      <pos x="2320" y="-580"/>
    </visualElement>
    <visualElement>
      <elementName>Ground</elementName>
      <elementAttributes/>
      <pos x="2020" y="-560"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>Input Splitting</string>
          <string>7,1</string>
        </entry>
      </elementAttributes>
      <pos x="2080" y="-580"/>
    </visualElement>
    <visualElement>
      <elementName>Not</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>8</int>
        </entry>
      </elementAttributes>
      <pos x="2180" y="-580"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>small</string>
          <boolean>true</boolean>
        </entry>
        <entry>
          <string>addValueToGraph</string>
          <boolean>false</boolean>
        </entry>
        <entry>
          <string>Label</string>
          <string>JOGADA FEITA</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>7</int>
        </entry>
      </elementAttributes>
      <pos x="1480" y="140"/>
    </visualElement>
    <visualElement>
      <elementName>Seven-Seg</elementName>
      <elementAttributes/>
      <pos x="1800" y="-60"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>Input Splitting</string>
          <string>8</string>
        </entry>
        <entry>
          <string>Output Splitting</string>
          <string>1*8</string>
        </entry>
      </elementAttributes>
      <pos x="1680" y="180"/>
    </visualElement>
    <visualElement>
      <elementName>Ground</elementName>
      <elementAttributes/>
      <pos x="1280" y="200"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>Input Splitting</string>
          <string>7,1</string>
        </entry>
      </elementAttributes>
      <pos x="1340" y="180"/>
    </visualElement>
    <visualElement>
      <elementName>Not</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>8</int>
        </entry>
      </elementAttributes>
      <pos x="1500" y="180"/>
    </visualElement>
    <visualElement>
      <elementName>Clock</elementName>
      <elementAttributes>
        <entry>
          <string>runRealTime</string>
          <boolean>true</boolean>
        </entry>
        <entry>
          <string>Label</string>
          <string>CLOCK</string>
        </entry>
        <entry>
          <string>Frequency</string>
          <int>1000</int>
        </entry>
      </elementAttributes>
      <pos x="500" y="-520"/>
    </visualElement>
    <visualElement>
      <elementName>LED</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>Label</string>
          <string>LEDS(0)</string>
        </entry>
      </elementAttributes>
      <pos x="960" y="40"/>
    </visualElement>
    <visualElement>
      <elementName>LED</elementName>
      <elementAttributes>
        <entry>
          <string>Color</string>
          <awt-color>
            <red>102</red>
            <green>255</green>
            <blue>0</blue>
            <alpha>255</alpha>
          </awt-color>
        </entry>
        <entry>
          <string>rotation</string>
          <rotation reference="../../../../visualElement[33]/elementAttributes/entry/rotation"/>
        </entry>
        <entry>
          <string>Label</string>
          <string>LEDS(2)</string>
        </entry>
      </elementAttributes>
      <pos x="1080" y="40"/>
    </visualElement>
    <visualElement>
      <elementName>LED</elementName>
      <elementAttributes>
        <entry>
          <string>Color</string>
          <awt-color>
            <red>0</red>
            <green>153</green>
            <blue>153</blue>
            <alpha>255</alpha>
          </awt-color>
        </entry>
        <entry>
          <string>rotation</string>
          <rotation reference="../../../../visualElement[33]/elementAttributes/entry/rotation"/>
        </entry>
        <entry>
          <string>Label</string>
          <string>LEDS(3)</string>
        </entry>
      </elementAttributes>
      <pos x="1140" y="40"/>
    </visualElement>
    <visualElement>
      <elementName>LED</elementName>
      <elementAttributes>
        <entry>
          <string>Color</string>
          <awt-color>
            <red>255</red>
            <green>255</green>
            <blue>0</blue>
            <alpha>255</alpha>
          </awt-color>
        </entry>
        <entry>
          <string>rotation</string>
          <rotation reference="../../../../visualElement[33]/elementAttributes/entry/rotation"/>
        </entry>
        <entry>
          <string>Label</string>
          <string>LEDS(1)</string>
        </entry>
      </elementAttributes>
      <pos x="1020" y="40"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>splitterSpreading</string>
          <int>3</int>
        </entry>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>Input Splitting</string>
          <string>4</string>
        </entry>
        <entry>
          <string>Output Splitting</string>
          <string>1*4</string>
        </entry>
      </elementAttributes>
      <pos x="960" y="200"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>splitterSpreading</string>
          <int>4</int>
        </entry>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>Input Splitting</string>
          <string>1*4</string>
        </entry>
        <entry>
          <string>Output Splitting</string>
          <string>4</string>
        </entry>
      </elementAttributes>
      <pos x="520" y="-100"/>
    </visualElement>
    <visualElement>
      <elementName>Button</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>RESET</string>
        </entry>
      </elementAttributes>
      <pos x="500" y="-480"/>
    </visualElement>
    <visualElement>
      <elementName>Button</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>JOGAR</string>
        </entry>
      </elementAttributes>
      <pos x="500" y="-440"/>
    </visualElement>
    <visualElement>
      <elementName>LED</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>PERDEU`</string>
        </entry>
      </elementAttributes>
      <pos x="1620" y="-420"/>
    </visualElement>
    <visualElement>
      <elementName>LED</elementName>
      <elementAttributes>
        <entry>
          <string>Color</string>
          <awt-color>
            <red>102</red>
            <green>255</green>
            <blue>0</blue>
            <alpha>255</alpha>
          </awt-color>
        </entry>
        <entry>
          <string>Label</string>
          <string>GANHOU</string>
        </entry>
      </elementAttributes>
      <pos x="1620" y="-460"/>
    </visualElement>
    <visualElement>
      <elementName>LED</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>TIMEOUT</string>
        </entry>
      </elementAttributes>
      <pos x="1620" y="-380"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>PRONTO</string>
        </entry>
      </elementAttributes>
      <pos x="1620" y="-340"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>C = M</string>
        </entry>
      </elementAttributes>
      <pos x="1620" y="-100"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>E = S</string>
        </entry>
      </elementAttributes>
      <pos x="1620" y="-140"/>
    </visualElement>
    <visualElement>
      <elementName>ButtonLED</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>Label</string>
          <string>BOTOES(0)</string>
        </entry>
      </elementAttributes>
      <pos x="520" y="0"/>
    </visualElement>
    <visualElement>
      <elementName>ButtonLED</elementName>
      <elementAttributes>
        <entry>
          <string>Color</string>
          <awt-color>
            <red>255</red>
            <green>255</green>
            <blue>0</blue>
            <alpha>255</alpha>
          </awt-color>
        </entry>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>Label</string>
          <string>BOTOES(1)</string>
        </entry>
      </elementAttributes>
      <pos x="600" y="0"/>
    </visualElement>
    <visualElement>
      <elementName>ButtonLED</elementName>
      <elementAttributes>
        <entry>
          <string>Color</string>
          <awt-color>
            <red>51</red>
            <green>255</green>
            <blue>0</blue>
            <alpha>255</alpha>
          </awt-color>
        </entry>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>Label</string>
          <string>BOTOES(2)</string>
        </entry>
      </elementAttributes>
      <pos x="680" y="0"/>
    </visualElement>
    <visualElement>
      <elementName>ButtonLED</elementName>
      <elementAttributes>
        <entry>
          <string>Color</string>
          <awt-color>
            <red>0</red>
            <green>204</green>
            <blue>153</blue>
            <alpha>255</alpha>
          </awt-color>
        </entry>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>Label</string>
          <string>BOTOES(3)</string>
        </entry>
      </elementAttributes>
      <pos x="760" y="0"/>
    </visualElement>
    <visualElement>
      <elementName>VDD</elementName>
      <elementAttributes/>
      <pos x="580" y="220"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>Memoria a ser Jogada</string>
        </entry>
      </elementAttributes>
      <pos x="500" y="-400"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>Nivel de Dificuldade</string>
        </entry>
        <entry>
          <string>InDefault</string>
          <value v="1" z="false"/>
        </entry>
      </elementAttributes>
      <pos x="500" y="-360"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>db\_clock</string>
        </entry>
      </elementAttributes>
      <pos x="1620" y="-300"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>db\_tem\_jogada</string>
        </entry>
      </elementAttributes>
      <pos x="1620" y="-220"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>db\_fimS</string>
        </entry>
      </elementAttributes>
      <pos x="1620" y="-180"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>db\_seletor\_memoria</string>
        </entry>
      </elementAttributes>
      <pos x="1460" y="-60"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>db\_timeout</string>
        </entry>
      </elementAttributes>
      <pos x="1460" y="-20"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>db\_timeoutL</string>
        </entry>
      </elementAttributes>
      <pos x="1460" y="20"/>
    </visualElement>
  </visualElements>
  <wires>
    <wire>
      <p1 x="540" y="0"/>
      <p2 x="560" y="0"/>
    </wire>
    <wire>
      <p1 x="620" y="0"/>
      <p2 x="640" y="0"/>
    </wire>
    <wire>
      <p1 x="700" y="0"/>
      <p2 x="720" y="0"/>
    </wire>
    <wire>
      <p1 x="780" y="0"/>
      <p2 x="800" y="0"/>
    </wire>
    <wire>
      <p1 x="2400" y="-260"/>
      <p2 x="2440" y="-260"/>
    </wire>
    <wire>
      <p1 x="1060" y="-260"/>
      <p2 x="1980" y="-260"/>
    </wire>
    <wire>
      <p1 x="1740" y="-900"/>
      <p2 x="1860" y="-900"/>
    </wire>
    <wire>
      <p1 x="580" y="260"/>
      <p2 x="680" y="260"/>
    </wire>
    <wire>
      <p1 x="500" y="-520"/>
      <p2 x="740" y="-520"/>
    </wire>
    <wire>
      <p1 x="1060" y="-520"/>
      <p2 x="1340" y="-520"/>
    </wire>
    <wire>
      <p1 x="2360" y="-140"/>
      <p2 x="2540" y="-140"/>
    </wire>
    <wire>
      <p1 x="1200" y="-140"/>
      <p2 x="1620" y="-140"/>
    </wire>
    <wire>
      <p1 x="2440" y="140"/>
      <p2 x="2480" y="140"/>
    </wire>
    <wire>
      <p1 x="1260" y="140"/>
      <p2 x="1300" y="140"/>
    </wire>
    <wire>
      <p1 x="1800" y="140"/>
      <p2 x="1840" y="140"/>
    </wire>
    <wire>
      <p1 x="1300" y="140"/>
      <p2 x="1480" y="140"/>
    </wire>
    <wire>
      <p1 x="500" y="-400"/>
      <p2 x="580" y="-400"/>
    </wire>
    <wire>
      <p1 x="1060" y="-400"/>
      <p2 x="1600" y="-400"/>
    </wire>
    <wire>
      <p1 x="2400" y="-660"/>
      <p2 x="2440" y="-660"/>
    </wire>
    <wire>
      <p1 x="1780" y="-660"/>
      <p2 x="1820" y="-660"/>
    </wire>
    <wire>
      <p1 x="1400" y="-20"/>
      <p2 x="1460" y="-20"/>
    </wire>
    <wire>
      <p1 x="1440" y="20"/>
      <p2 x="1460" y="20"/>
    </wire>
    <wire>
      <p1 x="1160" y="-280"/>
      <p2 x="1580" y="-280"/>
    </wire>
    <wire>
      <p1 x="1060" y="-280"/>
      <p2 x="1140" y="-280"/>
    </wire>
    <wire>
      <p1 x="2360" y="-540"/>
      <p2 x="2540" y="-540"/>
    </wire>
    <wire>
      <p1 x="1080" y="-540"/>
      <p2 x="1980" y="-540"/>
    </wire>
    <wire>
      <p1 x="2020" y="-160"/>
      <p2 x="2080" y="-160"/>
    </wire>
    <wire>
      <p1 x="1820" y="160"/>
      <p2 x="1860" y="160"/>
    </wire>
    <wire>
      <p1 x="1960" y="160"/>
      <p2 x="2060" y="160"/>
    </wire>
    <wire>
      <p1 x="2460" y="160"/>
      <p2 x="2500" y="160"/>
    </wire>
    <wire>
      <p1 x="2060" y="160"/>
      <p2 x="2180" y="160"/>
    </wire>
    <wire>
      <p1 x="2320" y="-420"/>
      <p2 x="2440" y="-420"/>
    </wire>
    <wire>
      <p1 x="1320" y="-420"/>
      <p2 x="1620" y="-420"/>
    </wire>
    <wire>
      <p1 x="520" y="-420"/>
      <p2 x="560" y="-420"/>
    </wire>
    <wire>
      <p1 x="600" y="-420"/>
      <p2 x="740" y="-420"/>
    </wire>
    <wire>
      <p1 x="1060" y="-420"/>
      <p2 x="1260" y="-420"/>
    </wire>
    <wire>
      <p1 x="1760" y="-680"/>
      <p2 x="1800" y="-680"/>
    </wire>
    <wire>
      <p1 x="2340" y="-40"/>
      <p2 x="2460" y="-40"/>
    </wire>
    <wire>
      <p1 x="1260" y="-300"/>
      <p2 x="1620" y="-300"/>
    </wire>
    <wire>
      <p1 x="1060" y="-300"/>
      <p2 x="1080" y="-300"/>
    </wire>
    <wire>
      <p1 x="1720" y="-560"/>
      <p2 x="1900" y="-560"/>
    </wire>
    <wire>
      <p1 x="2020" y="-560"/>
      <p2 x="2080" y="-560"/>
    </wire>
    <wire>
      <p1 x="2040" y="-180"/>
      <p2 x="2080" y="-180"/>
    </wire>
    <wire>
      <p1 x="2100" y="-180"/>
      <p2 x="2180" y="-180"/>
    </wire>
    <wire>
      <p1 x="2220" y="-180"/>
      <p2 x="2320" y="-180"/>
    </wire>
    <wire>
      <p1 x="1580" y="-180"/>
      <p2 x="1620" y="-180"/>
    </wire>
    <wire>
      <p1 x="1060" y="-180"/>
      <p2 x="1440" y="-180"/>
    </wire>
    <wire>
      <p1 x="2320" y="-820"/>
      <p2 x="2440" y="-820"/>
    </wire>
    <wire>
      <p1 x="1300" y="180"/>
      <p2 x="1340" y="180"/>
    </wire>
    <wire>
      <p1 x="1360" y="180"/>
      <p2 x="1500" y="180"/>
    </wire>
    <wire>
      <p1 x="1540" y="180"/>
      <p2 x="1680" y="180"/>
    </wire>
    <wire>
      <p1 x="2480" y="180"/>
      <p2 x="2520" y="180"/>
    </wire>
    <wire>
      <p1 x="2340" y="-440"/>
      <p2 x="2460" y="-440"/>
    </wire>
    <wire>
      <p1 x="500" y="-440"/>
      <p2 x="540" y="-440"/>
    </wire>
    <wire>
      <p1 x="580" y="-440"/>
      <p2 x="740" y="-440"/>
    </wire>
    <wire>
      <p1 x="1060" y="-440"/>
      <p2 x="1240" y="-440"/>
    </wire>
    <wire>
      <p1 x="1680" y="-60"/>
      <p2 x="1800" y="-60"/>
    </wire>
    <wire>
      <p1 x="2360" y="-60"/>
      <p2 x="2480" y="-60"/>
    </wire>
    <wire>
      <p1 x="1360" y="-60"/>
      <p2 x="1460" y="-60"/>
    </wire>
    <wire>
      <p1 x="1060" y="-320"/>
      <p2 x="1220" y="-320"/>
    </wire>
    <wire>
      <p1 x="2040" y="-580"/>
      <p2 x="2080" y="-580"/>
    </wire>
    <wire>
      <p1 x="2100" y="-580"/>
      <p2 x="2180" y="-580"/>
    </wire>
    <wire>
      <p1 x="2220" y="-580"/>
      <p2 x="2320" y="-580"/>
    </wire>
    <wire>
      <p1 x="1280" y="-580"/>
      <p2 x="1340" y="-580"/>
    </wire>
    <wire>
      <p1 x="2460" y="-200"/>
      <p2 x="2500" y="-200"/>
    </wire>
    <wire>
      <p1 x="1060" y="-200"/>
      <p2 x="1400" y="-200"/>
    </wire>
    <wire>
      <p1 x="2340" y="-840"/>
      <p2 x="2460" y="-840"/>
    </wire>
    <wire>
      <p1 x="1680" y="-840"/>
      <p2 x="1800" y="-840"/>
    </wire>
    <wire>
      <p1 x="2060" y="200"/>
      <p2 x="2100" y="200"/>
    </wire>
    <wire>
      <p1 x="2120" y="200"/>
      <p2 x="2200" y="200"/>
    </wire>
    <wire>
      <p1 x="2240" y="200"/>
      <p2 x="2340" y="200"/>
    </wire>
    <wire>
      <p1 x="1280" y="200"/>
      <p2 x="1340" y="200"/>
    </wire>
    <wire>
      <p1 x="560" y="200"/>
      <p2 x="640" y="200"/>
    </wire>
    <wire>
      <p1 x="640" y="200"/>
      <p2 x="680" y="200"/>
    </wire>
    <wire>
      <p1 x="680" y="200"/>
      <p2 x="720" y="200"/>
    </wire>
    <wire>
      <p1 x="720" y="200"/>
      <p2 x="800" y="200"/>
    </wire>
    <wire>
      <p1 x="2480" y="-460"/>
      <p2 x="2540" y="-460"/>
    </wire>
    <wire>
      <p1 x="1340" y="-460"/>
      <p2 x="1620" y="-460"/>
    </wire>
    <wire>
      <p1 x="560" y="-460"/>
      <p2 x="740" y="-460"/>
    </wire>
    <wire>
      <p1 x="1060" y="-460"/>
      <p2 x="1280" y="-460"/>
    </wire>
    <wire>
      <p1 x="2500" y="-80"/>
      <p2 x="2560" y="-80"/>
    </wire>
    <wire>
      <p1 x="1700" y="-80"/>
      <p2 x="1820" y="-80"/>
    </wire>
    <wire>
      <p1 x="1280" y="-340"/>
      <p2 x="1620" y="-340"/>
    </wire>
    <wire>
      <p1 x="1060" y="-340"/>
      <p2 x="1160" y="-340"/>
    </wire>
    <wire>
      <p1 x="1300" y="-600"/>
      <p2 x="1340" y="-600"/>
    </wire>
    <wire>
      <p1 x="1360" y="-600"/>
      <p2 x="1500" y="-600"/>
    </wire>
    <wire>
      <p1 x="1540" y="-600"/>
      <p2 x="1680" y="-600"/>
    </wire>
    <wire>
      <p1 x="2460" y="-600"/>
      <p2 x="2500" y="-600"/>
    </wire>
    <wire>
      <p1 x="1700" y="-860"/>
      <p2 x="1820" y="-860"/>
    </wire>
    <wire>
      <p1 x="2480" y="-860"/>
      <p2 x="2540" y="-860"/>
    </wire>
    <wire>
      <p1 x="2440" y="-220"/>
      <p2 x="2480" y="-220"/>
    </wire>
    <wire>
      <p1 x="1980" y="-220"/>
      <p2 x="2040" y="-220"/>
    </wire>
    <wire>
      <p1 x="1600" y="-220"/>
      <p2 x="1620" y="-220"/>
    </wire>
    <wire>
      <p1 x="1060" y="-220"/>
      <p2 x="1360" y="-220"/>
    </wire>
    <wire>
      <p1 x="2040" y="-220"/>
      <p2 x="2160" y="-220"/>
    </wire>
    <wire>
      <p1 x="1720" y="220"/>
      <p2 x="1900" y="220"/>
    </wire>
    <wire>
      <p1 x="2040" y="220"/>
      <p2 x="2100" y="220"/>
    </wire>
    <wire>
      <p1 x="960" y="220"/>
      <p2 x="1240" y="220"/>
    </wire>
    <wire>
      <p1 x="2380" y="-480"/>
      <p2 x="2500" y="-480"/>
    </wire>
    <wire>
      <p1 x="500" y="-480"/>
      <p2 x="520" y="-480"/>
    </wire>
    <wire>
      <p1 x="540" y="-480"/>
      <p2 x="740" y="-480"/>
    </wire>
    <wire>
      <p1 x="1060" y="-480"/>
      <p2 x="1300" y="-480"/>
    </wire>
    <wire>
      <p1 x="2400" y="-100"/>
      <p2 x="2520" y="-100"/>
    </wire>
    <wire>
      <p1 x="1840" y="-100"/>
      <p2 x="1900" y="-100"/>
    </wire>
    <wire>
      <p1 x="1180" y="-100"/>
      <p2 x="1620" y="-100"/>
    </wire>
    <wire>
      <p1 x="1760" y="100"/>
      <p2 x="1800" y="100"/>
    </wire>
    <wire>
      <p1 x="500" y="-360"/>
      <p2 x="600" y="-360"/>
    </wire>
    <wire>
      <p1 x="1060" y="-360"/>
      <p2 x="1200" y="-360"/>
    </wire>
    <wire>
      <p1 x="1820" y="-620"/>
      <p2 x="1860" y="-620"/>
    </wire>
    <wire>
      <p1 x="2440" y="-620"/>
      <p2 x="2480" y="-620"/>
    </wire>
    <wire>
      <p1 x="1980" y="-620"/>
      <p2 x="2040" y="-620"/>
    </wire>
    <wire>
      <p1 x="2040" y="-620"/>
      <p2 x="2160" y="-620"/>
    </wire>
    <wire>
      <p1 x="1840" y="-880"/>
      <p2 x="1900" y="-880"/>
    </wire>
    <wire>
      <p1 x="2380" y="-880"/>
      <p2 x="2500" y="-880"/>
    </wire>
    <wire>
      <p1 x="2420" y="-240"/>
      <p2 x="2460" y="-240"/>
    </wire>
    <wire>
      <p1 x="1060" y="-240"/>
      <p2 x="1960" y="-240"/>
    </wire>
    <wire>
      <p1 x="2380" y="240"/>
      <p2 x="2560" y="240"/>
    </wire>
    <wire>
      <p1 x="520" y="-500"/>
      <p2 x="740" y="-500"/>
    </wire>
    <wire>
      <p1 x="1060" y="-500"/>
      <p2 x="1320" y="-500"/>
    </wire>
    <wire>
      <p1 x="1740" y="-120"/>
      <p2 x="1860" y="-120"/>
    </wire>
    <wire>
      <p1 x="1140" y="-120"/>
      <p2 x="1260" y="-120"/>
    </wire>
    <wire>
      <p1 x="1780" y="120"/>
      <p2 x="1820" y="120"/>
    </wire>
    <wire>
      <p1 x="2420" y="120"/>
      <p2 x="2460" y="120"/>
    </wire>
    <wire>
      <p1 x="1300" y="-380"/>
      <p2 x="1620" y="-380"/>
    </wire>
    <wire>
      <p1 x="1060" y="-380"/>
      <p2 x="1180" y="-380"/>
    </wire>
    <wire>
      <p1 x="1800" y="-640"/>
      <p2 x="1840" y="-640"/>
    </wire>
    <wire>
      <p1 x="2420" y="-640"/>
      <p2 x="2460" y="-640"/>
    </wire>
    <wire>
      <p1 x="1220" y="-640"/>
      <p2 x="1300" y="-640"/>
    </wire>
    <wire>
      <p1 x="1300" y="-640"/>
      <p2 x="1480" y="-640"/>
    </wire>
    <wire>
      <p1 x="2560" y="-80"/>
      <p2 x="2560" y="240"/>
    </wire>
    <wire>
      <p1 x="640" y="0"/>
      <p2 x="640" y="200"/>
    </wire>
    <wire>
      <p1 x="1280" y="-460"/>
      <p2 x="1280" y="-340"/>
    </wire>
    <wire>
      <p1 x="1800" y="-640"/>
      <p2 x="1800" y="-620"/>
    </wire>
    <wire>
      <p1 x="1800" y="-700"/>
      <p2 x="1800" y="-680"/>
    </wire>
    <wire>
      <p1 x="1800" y="140"/>
      <p2 x="1800" y="160"/>
    </wire>
    <wire>
      <p1 x="1800" y="80"/>
      <p2 x="1800" y="100"/>
    </wire>
    <wire>
      <p1 x="520" y="-100"/>
      <p2 x="520" y="0"/>
    </wire>
    <wire>
      <p1 x="520" y="-500"/>
      <p2 x="520" y="-480"/>
    </wire>
    <wire>
      <p1 x="520" y="-420"/>
      <p2 x="520" y="-120"/>
    </wire>
    <wire>
      <p1 x="2440" y="-220"/>
      <p2 x="2440" y="-200"/>
    </wire>
    <wire>
      <p1 x="2440" y="-280"/>
      <p2 x="2440" y="-260"/>
    </wire>
    <wire>
      <p1 x="2440" y="140"/>
      <p2 x="2440" y="180"/>
    </wire>
    <wire>
      <p1 x="2440" y="-620"/>
      <p2 x="2440" y="-600"/>
    </wire>
    <wire>
      <p1 x="2440" y="-680"/>
      <p2 x="2440" y="-660"/>
    </wire>
    <wire>
      <p1 x="1160" y="-340"/>
      <p2 x="1160" y="-280"/>
    </wire>
    <wire>
      <p1 x="2060" y="160"/>
      <p2 x="2060" y="200"/>
    </wire>
    <wire>
      <p1 x="1680" y="-840"/>
      <p2 x="1680" y="-620"/>
    </wire>
    <wire>
      <p1 x="1680" y="-60"/>
      <p2 x="1680" y="160"/>
    </wire>
    <wire>
      <p1 x="2320" y="-420"/>
      <p2 x="2320" y="-200"/>
    </wire>
    <wire>
      <p1 x="2320" y="-820"/>
      <p2 x="2320" y="-600"/>
    </wire>
    <wire>
      <p1 x="1300" y="-640"/>
      <p2 x="1300" y="-600"/>
    </wire>
    <wire>
      <p1 x="1300" y="140"/>
      <p2 x="1300" y="180"/>
    </wire>
    <wire>
      <p1 x="1300" y="-480"/>
      <p2 x="1300" y="-380"/>
    </wire>
    <wire>
      <p1 x="1820" y="-860"/>
      <p2 x="1820" y="-840"/>
    </wire>
    <wire>
      <p1 x="1820" y="-700"/>
      <p2 x="1820" y="-660"/>
    </wire>
    <wire>
      <p1 x="1820" y="-80"/>
      <p2 x="1820" y="-60"/>
    </wire>
    <wire>
      <p1 x="1820" y="80"/>
      <p2 x="1820" y="120"/>
    </wire>
    <wire>
      <p1 x="2460" y="-440"/>
      <p2 x="2460" y="-420"/>
    </wire>
    <wire>
      <p1 x="2460" y="-280"/>
      <p2 x="2460" y="-240"/>
    </wire>
    <wire>
      <p1 x="2460" y="160"/>
      <p2 x="2460" y="180"/>
    </wire>
    <wire>
      <p1 x="2460" y="100"/>
      <p2 x="2460" y="120"/>
    </wire>
    <wire>
      <p1 x="2460" y="-840"/>
      <p2 x="2460" y="-820"/>
    </wire>
    <wire>
      <p1 x="2460" y="-680"/>
      <p2 x="2460" y="-640"/>
    </wire>
    <wire>
      <p1 x="540" y="-480"/>
      <p2 x="540" y="-440"/>
    </wire>
    <wire>
      <p1 x="1180" y="-380"/>
      <p2 x="1180" y="-100"/>
    </wire>
    <wire>
      <p1 x="800" y="0"/>
      <p2 x="800" y="200"/>
    </wire>
    <wire>
      <p1 x="1440" y="-180"/>
      <p2 x="1440" y="20"/>
    </wire>
    <wire>
      <p1 x="1700" y="-860"/>
      <p2 x="1700" y="-620"/>
    </wire>
    <wire>
      <p1 x="1700" y="-80"/>
      <p2 x="1700" y="160"/>
    </wire>
    <wire>
      <p1 x="2340" y="-440"/>
      <p2 x="2340" y="-200"/>
    </wire>
    <wire>
      <p1 x="2340" y="-40"/>
      <p2 x="2340" y="180"/>
    </wire>
    <wire>
      <p1 x="2340" y="-840"/>
      <p2 x="2340" y="-600"/>
    </wire>
    <wire>
      <p1 x="680" y="-100"/>
      <p2 x="680" y="0"/>
    </wire>
    <wire>
      <p1 x="680" y="200"/>
      <p2 x="680" y="260"/>
    </wire>
    <wire>
      <p1 x="1960" y="-240"/>
      <p2 x="1960" y="160"/>
    </wire>
    <wire>
      <p1 x="1320" y="-500"/>
      <p2 x="1320" y="-420"/>
    </wire>
    <wire>
      <p1 x="1580" y="-280"/>
      <p2 x="1580" y="-180"/>
    </wire>
    <wire>
      <p1 x="1840" y="-700"/>
      <p2 x="1840" y="-640"/>
    </wire>
    <wire>
      <p1 x="1840" y="-880"/>
      <p2 x="1840" y="-840"/>
    </wire>
    <wire>
      <p1 x="1840" y="80"/>
      <p2 x="1840" y="140"/>
    </wire>
    <wire>
      <p1 x="1840" y="-100"/>
      <p2 x="1840" y="-60"/>
    </wire>
    <wire>
      <p1 x="2480" y="-280"/>
      <p2 x="2480" y="-220"/>
    </wire>
    <wire>
      <p1 x="2480" y="-460"/>
      <p2 x="2480" y="-420"/>
    </wire>
    <wire>
      <p1 x="2480" y="-60"/>
      <p2 x="2480" y="-40"/>
    </wire>
    <wire>
      <p1 x="2480" y="100"/>
      <p2 x="2480" y="140"/>
    </wire>
    <wire>
      <p1 x="2480" y="-680"/>
      <p2 x="2480" y="-620"/>
    </wire>
    <wire>
      <p1 x="2480" y="-860"/>
      <p2 x="2480" y="-820"/>
    </wire>
    <wire>
      <p1 x="560" y="0"/>
      <p2 x="560" y="200"/>
    </wire>
    <wire>
      <p1 x="560" y="-460"/>
      <p2 x="560" y="-420"/>
    </wire>
    <wire>
      <p1 x="1200" y="-360"/>
      <p2 x="1200" y="-140"/>
    </wire>
    <wire>
      <p1 x="1720" y="-620"/>
      <p2 x="1720" y="-560"/>
    </wire>
    <wire>
      <p1 x="1720" y="160"/>
      <p2 x="1720" y="220"/>
    </wire>
    <wire>
      <p1 x="2360" y="-200"/>
      <p2 x="2360" y="-140"/>
    </wire>
    <wire>
      <p1 x="2360" y="-60"/>
      <p2 x="2360" y="180"/>
    </wire>
    <wire>
      <p1 x="2360" y="-600"/>
      <p2 x="2360" y="-540"/>
    </wire>
    <wire>
      <p1 x="1080" y="40"/>
      <p2 x="1080" y="180"/>
    </wire>
    <wire>
      <p1 x="1080" y="-540"/>
      <p2 x="1080" y="-300"/>
    </wire>
    <wire>
      <p1 x="1980" y="-260"/>
      <p2 x="1980" y="-220"/>
    </wire>
    <wire>
      <p1 x="1980" y="-620"/>
      <p2 x="1980" y="-540"/>
    </wire>
    <wire>
      <p1 x="1340" y="-520"/>
      <p2 x="1340" y="-460"/>
    </wire>
    <wire>
      <p1 x="960" y="200"/>
      <p2 x="960" y="220"/>
    </wire>
    <wire>
      <p1 x="960" y="40"/>
      <p2 x="960" y="180"/>
    </wire>
    <wire>
      <p1 x="1600" y="-400"/>
      <p2 x="1600" y="-220"/>
    </wire>
    <wire>
      <p1 x="1860" y="-700"/>
      <p2 x="1860" y="-620"/>
    </wire>
    <wire>
      <p1 x="1860" y="-900"/>
      <p2 x="1860" y="-840"/>
    </wire>
    <wire>
      <p1 x="1860" y="80"/>
      <p2 x="1860" y="160"/>
    </wire>
    <wire>
      <p1 x="1860" y="-120"/>
      <p2 x="1860" y="-60"/>
    </wire>
    <wire>
      <p1 x="2500" y="-280"/>
      <p2 x="2500" y="-200"/>
    </wire>
    <wire>
      <p1 x="2500" y="-480"/>
      <p2 x="2500" y="-420"/>
    </wire>
    <wire>
      <p1 x="2500" y="100"/>
      <p2 x="2500" y="160"/>
    </wire>
    <wire>
      <p1 x="2500" y="-80"/>
      <p2 x="2500" y="-40"/>
    </wire>
    <wire>
      <p1 x="2500" y="-680"/>
      <p2 x="2500" y="-600"/>
    </wire>
    <wire>
      <p1 x="2500" y="-880"/>
      <p2 x="2500" y="-820"/>
    </wire>
    <wire>
      <p1 x="580" y="220"/>
      <p2 x="580" y="260"/>
    </wire>
    <wire>
      <p1 x="580" y="-440"/>
      <p2 x="580" y="-400"/>
    </wire>
    <wire>
      <p1 x="1220" y="-640"/>
      <p2 x="1220" y="-320"/>
    </wire>
    <wire>
      <p1 x="1740" y="-900"/>
      <p2 x="1740" y="-620"/>
    </wire>
    <wire>
      <p1 x="1740" y="-120"/>
      <p2 x="1740" y="160"/>
    </wire>
    <wire>
      <p1 x="2380" y="-480"/>
      <p2 x="2380" y="-200"/>
    </wire>
    <wire>
      <p1 x="2380" y="180"/>
      <p2 x="2380" y="240"/>
    </wire>
    <wire>
      <p1 x="2380" y="-880"/>
      <p2 x="2380" y="-600"/>
    </wire>
    <wire>
      <p1 x="720" y="0"/>
      <p2 x="720" y="200"/>
    </wire>
    <wire>
      <p1 x="1360" y="-220"/>
      <p2 x="1360" y="-60"/>
    </wire>
    <wire>
      <p1 x="600" y="-100"/>
      <p2 x="600" y="0"/>
    </wire>
    <wire>
      <p1 x="600" y="-420"/>
      <p2 x="600" y="-360"/>
    </wire>
    <wire>
      <p1 x="2520" y="100"/>
      <p2 x="2520" y="180"/>
    </wire>
    <wire>
      <p1 x="2520" y="-100"/>
      <p2 x="2520" y="-40"/>
    </wire>
    <wire>
      <p1 x="1240" y="-440"/>
      <p2 x="1240" y="220"/>
    </wire>
    <wire>
      <p1 x="1760" y="-680"/>
      <p2 x="1760" y="-620"/>
    </wire>
    <wire>
      <p1 x="1760" y="100"/>
      <p2 x="1760" y="160"/>
    </wire>
    <wire>
      <p1 x="2400" y="-260"/>
      <p2 x="2400" y="-200"/>
    </wire>
    <wire>
      <p1 x="2400" y="-100"/>
      <p2 x="2400" y="180"/>
    </wire>
    <wire>
      <p1 x="2400" y="-660"/>
      <p2 x="2400" y="-600"/>
    </wire>
    <wire>
      <p1 x="1900" y="-880"/>
      <p2 x="1900" y="-560"/>
    </wire>
    <wire>
      <p1 x="1900" y="-100"/>
      <p2 x="1900" y="220"/>
    </wire>
    <wire>
      <p1 x="2540" y="-460"/>
      <p2 x="2540" y="-140"/>
    </wire>
    <wire>
      <p1 x="2540" y="-860"/>
      <p2 x="2540" y="-540"/>
    </wire>
    <wire>
      <p1 x="1260" y="-420"/>
      <p2 x="1260" y="-300"/>
    </wire>
    <wire>
      <p1 x="1260" y="-120"/>
      <p2 x="1260" y="140"/>
    </wire>
    <wire>
      <p1 x="1780" y="-660"/>
      <p2 x="1780" y="-620"/>
    </wire>
    <wire>
      <p1 x="1780" y="120"/>
      <p2 x="1780" y="160"/>
    </wire>
    <wire>
      <p1 x="2420" y="-240"/>
      <p2 x="2420" y="-200"/>
    </wire>
    <wire>
      <p1 x="2420" y="120"/>
      <p2 x="2420" y="180"/>
    </wire>
    <wire>
      <p1 x="2420" y="-640"/>
      <p2 x="2420" y="-600"/>
    </wire>
    <wire>
      <p1 x="1140" y="40"/>
      <p2 x="1140" y="180"/>
    </wire>
    <wire>
      <p1 x="1140" y="-280"/>
      <p2 x="1140" y="-120"/>
    </wire>
    <wire>
      <p1 x="2040" y="-220"/>
      <p2 x="2040" y="-180"/>
    </wire>
    <wire>
      <p1 x="2040" y="-620"/>
      <p2 x="2040" y="-580"/>
    </wire>
    <wire>
      <p1 x="760" y="-100"/>
      <p2 x="760" y="0"/>
    </wire>
    <wire>
      <p1 x="1400" y="-200"/>
      <p2 x="1400" y="-20"/>
    </wire>
    <wire>
      <p1 x="1020" y="40"/>
      <p2 x="1020" y="180"/>
    </wire>
  </wires>
  <measurementOrdering/>
</circuit>